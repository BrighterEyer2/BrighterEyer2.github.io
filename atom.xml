<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BrighterEyer</title>
  
  <subtitle>用心看清世界，驻足停留一会儿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://brightereyer.xyz/"/>
  <updated>2020-01-13T11:14:51.000Z</updated>
  <id>http://brightereyer.xyz/</id>
  
  <author>
    <name>brightereyer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[windows] 启用组策略gpedit.msc</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914091000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914091000.html/</id>
    <published>2020-01-13T11:14:51.000Z</published>
    <updated>2020-01-13T11:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>windows10启用组策略gpedit.msc</p><p>exec.cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">dir &#x2F;b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line">dir &#x2F;b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line">for &#x2F;f %%i in (&#39;findstr &#x2F;i . List.txt 2^&gt;nul&#39;) do dism &#x2F;online &#x2F;norestart &#x2F;add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows10启用组策略gpedit.msc&lt;/p&gt;
&lt;p&gt;exec.cmd&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
    
      <category term="windows" scheme="http://brightereyer.xyz/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] keil乱码问题</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914090000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914090000.html/</id>
    <published>2020-01-13T11:14:50.000Z</published>
    <updated>2020-01-13T11:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qlexcel/article/details/54929072" target="_blank">keil中文乱码解决和个人习惯字体设置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qlexcel/article/details/54929072&quot; target=&quot;_blank&quot;&gt;keil中文乱码解决和个人习惯字体设置&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 网络+串口字符串收发</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914089000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914089000.html/</id>
    <published>2020-01-13T11:14:49.000Z</published>
    <updated>2020-01-13T11:14:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/ce2a09d2dde9" target="_blank">stm32串口编程实例：实现数据的收发功能</a></p><details><comments>bsp_usart.h</comments><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __BSP_USART_H</span><br><span class="line">#define__BSP_USART_H</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f4xx.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引脚定义</span><br><span class="line">&#x2F;*******************************************************&#x2F;</span><br><span class="line">#define DEBUG_USART                             USART1</span><br><span class="line">#define DEBUG_USART_CLK                         RCC_APB2Periph_USART1</span><br><span class="line"></span><br><span class="line">#define DEBUG_USART_RX_GPIO_PORT                GPIOA</span><br><span class="line">#define DEBUG_USART_RX_GPIO_CLK                 RCC_AHB1Periph_GPIOA</span><br><span class="line">#define DEBUG_USART_RX_PIN                      GPIO_Pin_10</span><br><span class="line">#define DEBUG_USART_RX_AF                       GPIO_AF_USART1</span><br><span class="line">#define DEBUG_USART_RX_SOURCE                   GPIO_PinSource10</span><br><span class="line"></span><br><span class="line">#define DEBUG_USART_TX_GPIO_PORT                GPIOA</span><br><span class="line">#define DEBUG_USART_TX_GPIO_CLK                 RCC_AHB1Periph_GPIOA</span><br><span class="line">#define DEBUG_USART_TX_PIN                      GPIO_Pin_9</span><br><span class="line">#define DEBUG_USART_TX_AF                       GPIO_AF_USART1</span><br><span class="line">#define DEBUG_USART_TX_SOURCE                   GPIO_PinSource9</span><br><span class="line">&#x2F;************************************************************&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;串口波特率</span><br><span class="line">#define DEBUG_USART_BAUDRATE                    115200</span><br><span class="line"></span><br><span class="line">void Debug_USART_Config(void);</span><br><span class="line">&#x2F;&#x2F;int fputc(int ch, FILE *f);</span><br><span class="line"></span><br><span class="line">void Usart_SendByte(USART_TypeDef *pUSARTx, uint8_t Data);</span><br><span class="line"></span><br><span class="line">void Usart_SendArray(USART_TypeDef *pUSARTx, uint8_t *data, uint8_t num);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;接收字符</span><br><span class="line">char usart1_getc(void);</span><br><span class="line">&#x2F;&#x2F;接收字符串</span><br><span class="line">int usart1_getstr(unsigned char* buff, int len);</span><br><span class="line"></span><br><span class="line">#endif &#x2F;* __USART1_H *&#x2F;</span><br></pre></td></tr></table></figure></details><details><comments>bsp_usart.c</comments><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;.&#x2F;usart&#x2F;bsp_usart.h&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @brief  DEBUG_USART GPIO 配置，工作模式配置。115200 8-N-1</span><br><span class="line"> * @param  无</span><br><span class="line"> * @retval 无</span><br><span class="line"> *&#x2F;</span><br><span class="line">void Debug_USART_Config(void)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_AHB1PeriphClockCmd( DEBUG_USART_RX_GPIO_CLK | DEBUG_USART_TX_GPIO_CLK, ENABLE);</span><br><span class="line"></span><br><span class="line">&#x2F;* 使能 UART 时钟 *&#x2F;</span><br><span class="line">RCC_APB2PeriphClockCmd(DEBUG_USART_CLK, ENABLE);</span><br><span class="line"></span><br><span class="line">&#x2F;* 连接 PXx 到 USARTx_Tx*&#x2F;</span><br><span class="line">GPIO_PinAFConfig(DEBUG_USART_RX_GPIO_PORT, DEBUG_USART_RX_SOURCE, DEBUG_USART_RX_AF);</span><br><span class="line"></span><br><span class="line">&#x2F;*  连接 PXx 到 USARTx__Rx*&#x2F;</span><br><span class="line">GPIO_PinAFConfig(DEBUG_USART_TX_GPIO_PORT, DEBUG_USART_TX_SOURCE, DEBUG_USART_TX_AF);</span><br><span class="line"></span><br><span class="line">&#x2F;* 配置Tx引脚为复用功能  *&#x2F;</span><br><span class="line">GPIO_InitStructure.GPIO_OType &#x3D; GPIO_OType_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_PuPd &#x3D; GPIO_PuPd_UP;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode &#x3D; GPIO_Mode_AF;</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin &#x3D; DEBUG_USART_TX_PIN  ;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed &#x3D; GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#x2F;* 配置Rx引脚为复用功能 *&#x2F;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode &#x3D; GPIO_Mode_AF;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin &#x3D; DEBUG_USART_RX_PIN;</span><br><span class="line">GPIO_Init(DEBUG_USART_RX_GPIO_PORT, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#x2F;* 配置串DEBUG_USART 模式 *&#x2F;</span><br><span class="line">USART_InitStructure.USART_BaudRate &#x3D; DEBUG_USART_BAUDRATE;</span><br><span class="line">USART_InitStructure.USART_WordLength &#x3D; USART_WordLength_8b;</span><br><span class="line">USART_InitStructure.USART_StopBits &#x3D; USART_StopBits_1;</span><br><span class="line">USART_InitStructure.USART_Parity &#x3D; USART_Parity_No ;</span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl &#x3D; USART_HardwareFlowControl_None;</span><br><span class="line">USART_InitStructure.USART_Mode &#x3D; USART_Mode_Rx | USART_Mode_Tx;</span><br><span class="line">USART_Init(DEBUG_USART, &amp;USART_InitStructure);</span><br><span class="line">USART_Cmd(DEBUG_USART, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;重定向c库函数printf到串口DEBUG_USART，重定向后可使用printf函数</span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* 发送一个字节数据到串口DEBUG_USART *&#x2F;</span><br><span class="line">USART_SendData(DEBUG_USART, (uint8_t) ch);</span><br><span class="line"></span><br><span class="line">&#x2F;* 等待发送完毕 *&#x2F;</span><br><span class="line">while (USART_GetFlagStatus(DEBUG_USART, USART_FLAG_TXE) &#x3D;&#x3D; RESET);</span><br><span class="line"></span><br><span class="line">return (ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;重定向c库函数printf到串口DEBUG_USART，重定向后可使用scanf、getchar函数</span><br><span class="line">int fgetc(FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* 等待串口输入数据 *&#x2F;</span><br><span class="line">while (USART_GetFlagStatus(DEBUG_USART, USART_FLAG_RXNE) &#x3D;&#x3D; RESET);</span><br><span class="line"></span><br><span class="line">return (int)USART_ReceiveData(DEBUG_USART);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Usart_SendByte(USART_TypeDef *pUSARTx, uint8_t Data)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(pUSARTx, Data);</span><br><span class="line">while (USART_GetFlagStatus(pUSARTx, USART_FLAG_TXE) &#x3D;&#x3D; RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Usart_SendArray(USART_TypeDef *pUSARTx, uint8_t *data, uint8_t num)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t t;</span><br><span class="line">for (t &#x3D; 0; t &lt; num; t++) &#123;</span><br><span class="line">Usart_SendByte(pUSARTx, data[t]);</span><br><span class="line">&#125;</span><br><span class="line">while (USART_GetFlagStatus(pUSARTx, USART_FLAG_TC) &#x3D;&#x3D; RESET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;接收字符</span><br><span class="line">char usart1_getc(void) &#123;</span><br><span class="line">char temp &#x3D; 0;</span><br><span class="line">while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) !&#x3D; SET);</span><br><span class="line">temp &#x3D; USART_ReceiveData(USART1);</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;接收字符串</span><br><span class="line">int usart1_getstr(unsigned char* buff, int len) &#123;</span><br><span class="line">int i &#x3D; 0;</span><br><span class="line">for (i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">buff[i] &#x3D; usart1_getc();</span><br><span class="line">&#125;</span><br><span class="line">return len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*********************************************END OF FILE**********************&#x2F;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/ce2a09d2dde9&quot; target=&quot;_blank&quot;&gt;stm32串口编程实例：实现数据的收发功能&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;
&lt;comments&gt;bsp_usart.h&lt;/comments&gt;
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[ps] 表情包</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914088000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914088000.html/</id>
    <published>2020-01-13T11:14:48.000Z</published>
    <updated>2020-01-13T11:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ibaotu.com/sucai/19437774.html?kwd=%E8%A1%A8%E6%83%85%E5%8C%85" target="_blank">可爱老鼠表情包2-给您拜年动图GIF</a></p><p><a href="https://ibaotu.com/sucai/19437781.html?kwd=%E8%A1%A8%E6%83%85%E5%8C%85" target="_blank">可爱老鼠表情包9-赞动图GIF</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ibaotu.com/sucai/19437774.html?kwd=%E8%A1%A8%E6%83%85%E5%8C%85&quot; target=&quot;_blank&quot;&gt;可爱老鼠表情包2-给您拜年动图GIF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
    
      <category term="ps" scheme="http://brightereyer.xyz/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>[linux] MQTT服务之mosquitto配置</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914087000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914087000.html/</id>
    <published>2020-01-13T11:14:47.000Z</published>
    <updated>2020-01-13T11:14:47.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;mosquitto&#x2F;</span><br><span class="line">touch pwfile acl</span><br><span class="line"></span><br><span class="line">vim mosquitto.conf</span><br><span class="line"></span><br><span class="line">allow_anonymous false</span><br><span class="line">password_file &#x2F;etc&#x2F;mosquitto&#x2F;pwfile</span><br><span class="line">acl_file acl_file &#x2F;etc&#x2F;mosquitto&#x2F;acl</span><br></pre></td></tr></table></figure><p>添加用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加用户&#39;admin&#39;</span><br><span class="line">mosquitto_passwd -c &#x2F;etc&#x2F;mosquitto&#x2F;pwfile admin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim acl</span><br><span class="line"></span><br><span class="line">user admin</span><br><span class="line">topic write mtopic&#x2F;#</span><br><span class="line"></span><br><span class="line">user admin</span><br><span class="line">topic read mtopic&#x2F;#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep mosquitto</span><br><span class="line">kill -9 18248</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c &#x2F;etc&#x2F;mosquitto&#x2F;mosquitto.conf -d</span><br></pre></td></tr></table></figure><p>（订阅端）客户端启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_sub -h 127.0.0.1 -t mtopic -u admin -P hello</span><br></pre></td></tr></table></figure><p>（发布者）客户端启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -h 127.0.0.1 -t mtopic -u admin -P hello -m &quot;test&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://brightereyer.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] ESP8266透传</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914086000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914086000.html/</id>
    <published>2020-01-13T11:14:46.000Z</published>
    <updated>2020-01-13T11:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1457141" target="_blank">ESP8266透传：利用STM32f103zet6发送数据到HTTP服务器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1457141&quot; target=&quot;_blank&quot;&gt;ESP8266透传：利用STM32f103zet6发送数据到HTTP服务器&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[虚拟机] 将VirtualBox和VMware虚拟机相互转换</title>
    <link href="http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914085000.html/"/>
    <id>http://brightereyer.xyz/2020/01/13/articles/2020/01/13/1578914085000.html/</id>
    <published>2020-01-13T11:14:45.000Z</published>
    <updated>2020-01-13T11:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_36242834/article/details/77801455" target="_blank">将VirtualBox和VMware虚拟机相互转换</a></p><p><a href="https://www.jb51.net/os/other/349015.html" target="_blank">将Vmware的镜像格式转换为Virtualbox的镜像格式的方法</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage.exe clonehd F:\centos-6.0-i386-minimal.vmdk F:\centos-6.0-i386-minimal.vdi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36242834/article/details/77801455&quot; target=&quot;_blank&quot;&gt;将VirtualBox和VMware虚拟机相互转换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
    
      <category term="虚拟机" scheme="http://brightereyer.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>[ubuntu] 安装配置STM32开发环境</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670561000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670561000.html/</id>
    <published>2020-01-10T15:36:01.000Z</published>
    <updated>2020-01-10T15:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u013908686/article/details/79883904" target="_blank">windows+arm+gcc开发环境的搭建</a><br><a href="https://github.com/MagicPrince666/STM32_LCD.git" target="_blank">STM32_LCD</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u013908686/article/details/79883904&quot; target=&quot;_blank&quot;&gt;windows+arm+gcc开发环境的搭建&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github
      
    
    </summary>
    
    
    
      <category term="ubuntu" scheme="http://brightereyer.xyz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 野火单片机cnblogs博客,含头文件和代码用例</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670560000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670560000.html/</id>
    <published>2020-01-10T15:36:00.000Z</published>
    <updated>2020-01-10T15:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/firege/" target="_blank">野火_firege</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/firege/&quot; target=&quot;_blank&quot;&gt;野火_firege&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 密码锁</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670559000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670559000.html/</id>
    <published>2020-01-10T15:35:59.000Z</published>
    <updated>2020-01-10T15:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sinat_23225111/article/details/53523568" target="_blank">一段在STM32上实现密码设置功能的小程序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/sinat_23225111/article/details/53523568&quot; target=&quot;_blank&quot;&gt;一段在STM32上实现密码设置功能的小程序&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] VM8978_MP3模块</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670558000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670558000.html/</id>
    <published>2020-01-10T15:35:58.000Z</published>
    <updated>2020-01-10T15:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wangzibigan/article/details/88428910" target="_blank">STM32：I2S驱动WM8978</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wangzibigan/article/details/88428910&quot; target=&quot;_blank&quot;&gt;STM32：I2S驱动WM8978&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] keil程序错误</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670557000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670557000.html/</id>
    <published>2020-01-10T15:35:57.000Z</published>
    <updated>2020-01-10T15:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="" target="_blank"></a></p><p><a href="https://blog.csdn.net/nightdrug/article/details/83279555" target="_blank">KEIL软件中出现”cannot open source input file”的问题解决方法</a></p><p><a href="https://www.cnblogs.com/ligangblog/archive/2018/11/15/9963786.html" target="_blank">keil编译运行错误，缺少error:#5：#include “core_cm3.h”</a></p><p><a href="https://blog.csdn.net/master_0_/article/details/95046305" target="_blank">Cannot access Memory (@ )</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STM32F429用DAP下载器下载失败，</span><br><span class="line"></span><br><span class="line">显示错误信息Cannot access Memory (@ 0xe000efd0, Read, Acc Size:4 Byte)</span><br><span class="line"></span><br><span class="line">Error. Flash Download failed - Target DLL has been cancelled</span><br><span class="line"></span><br><span class="line">Error: FlashDownload failedTarget .DLL has beencancelled</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/chief_cf/article/details/78732505" target="_blank">keil中变量声明问题及error: #268: declaration may not appear after executable statement in block</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/nightdrug/article/details/83279555&quot; target=&quot;_blank&quot;&gt;KEIL软件中出现”canno
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] keil5添加HAL库</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670556000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670556000.html/</id>
    <published>2020-01-10T15:35:56.000Z</published>
    <updated>2020-01-10T15:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lzh666/p/11279066.html" target="_blank">使用HAL库建立STM32工程</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">7.编译出错</span><br><span class="line">  我们提供的例程有可能编译出错，提示找不到tftpc.o文件，</span><br><span class="line"></span><br><span class="line">--原因如下：</span><br><span class="line">  程序发布时使用killkeil工具删除mdk生成的多余文件时，会把本目录下的tftpc.o文件也删除掉，导致编译出错，MDK编译错误提示如下：</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">..\..\..\..\Build\demo\MICO-Fire_F429\obj_RVMDK\mdk_demo.axf: error: L6002U: Could not open file ..\..\..\..\MICO\system\tftp_ota\tftpc.o: No such file or directory</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">--解决方法：</span><br><span class="line">  把“tftpc_o文件备份.zip”压缩包的“tftpc.o”备份文件复制到工程目录下的“\MICO\system\tftp_ota\tftp_ota”目录下，重新编译即可。</span><br></pre></td></tr></table></figure><p>问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot read jlink version number</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://blog.csdn.net/dxxdxpdxy/article/details/85101210" target="_blank">任意版本JLink驱动官方下载指引</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lzh666/p/11279066.html&quot; target=&quot;_blank&quot;&gt;使用HAL库建立STM32工程&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] keil5_ARM-MDK包</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670555000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670555000.html/</id>
    <published>2020-01-10T15:35:55.000Z</published>
    <updated>2020-01-10T15:35:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_42911200/article/details/81590158" target="_blank">Keil5的安装破解,包含MDK-ARM和C51</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">同时提供所需安装包</span><br><span class="line"></span><br><span class="line">链接：</span><br><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Ycsv1v4d10mtvuaMjhYCGg</span><br><span class="line">密码：</span><br><span class="line">dggh</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_41639829/article/details/81813992" target="_blank">MDK5安装破解以及安装stm32与C51支持包(附安装包)</a><br>MD5.14安装包与破解工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">链接：</span><br><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;14I0zwdvKlbR5PbrsAlxMDQ</span><br><span class="line">密码：</span><br><span class="line">d1cs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_42911200/article/details/81590158&quot; target=&quot;_blank&quot;&gt;Keil5的安装破解,包含MDK-ARM和C51&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] GPIO输入_按键检测</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670554000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670554000.html/</id>
    <published>2020-01-10T15:35:54.000Z</published>
    <updated>2020-01-10T15:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/firege/p/5748707.html" target="_blank">第12章 GPIO输入-按键检测—零死角玩转STM32-F429系列</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/firege/p/5748707.html&quot; target=&quot;_blank&quot;&gt;第12章 GPIO输入-按键检测—零死角玩转STM32-F429系列&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] esp8266+tcp</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670553000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670553000.html/</id>
    <published>2020-01-10T15:35:53.000Z</published>
    <updated>2020-01-10T15:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="" target="_blank"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] esp8266+mqtt</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670552000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670552000.html/</id>
    <published>2020-01-10T15:35:52.000Z</published>
    <updated>2020-01-10T15:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>MQTTPacket.h<br>transport.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;paho.mqtt.embedded-c&#x2F;tree&#x2F;master&#x2F;MQTTPacket&#x2F;src</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;paho.mqtt.embedded-c&#x2F;tree&#x2F;master&#x2F;MQTTPacket&#x2F;samples</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/kh766200466/article/details/79694119" target="_blank">STM32移植 MQTT</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.下载MQTT的库：</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;paho.mqtt.embedded-c</span><br><span class="line"></span><br><span class="line">2.将MQTTPacket\src目录下的文件添加到工程</span><br><span class="line"></span><br><span class="line">3.将MQTTPacket\samples下的transport.c、transport.h添加到工程</span><br></pre></td></tr></table></figure><p><a href="https://tson.com/stm32-sim800c-mqtt-hal/" target="_blank">在GPRS模块（SIM800C）和STM32芯片上实现MQTT协议（HAL版）</a></p><details><summary>main.h</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line">#include &quot;MQTTPacket.h&quot;</span><br><span class="line">#include &quot;transport.h&quot;</span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * This is in order to get an asynchronous signal to stop the sample,</span><br><span class="line"> * as the code loops waiting for msgs on the subscribed topic.</span><br><span class="line"> * Your actual code will depend on your hw and approach</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;&#x2F;现在关于signal的没有用到，所以在自己使用时全部删除了</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line"> </span><br><span class="line">int toStop &#x3D; 0;</span><br><span class="line"> </span><br><span class="line">void cfinish(int sig)</span><br><span class="line">&#123;</span><br><span class="line">signal(SIGINT, NULL);</span><br><span class="line">toStop &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void stop_init(void)</span><br><span class="line">&#123;</span><br><span class="line">signal(SIGINT, cfinish);</span><br><span class="line">signal(SIGTERM, cfinish);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* *&#x2F;</span><br><span class="line"> </span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">char* payload &#x3D; &quot;mypayload&quot;;</span><br><span class="line">char *host &#x3D; &quot;m2m.eclipse.org&quot;;</span><br><span class="line">int port &#x3D; 1883;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;先进行一些变量的注册，每一个变量都在后面有用到，具体使用时再解释</span><br><span class="line">MQTTPacket_connectData data &#x3D; MQTTPacket_connectData_initializer;</span><br><span class="line">int rc &#x3D; 0;</span><br><span class="line">int mysock &#x3D; 0;</span><br><span class="line">unsigned char buf[200];</span><br><span class="line">int buflen &#x3D; sizeof(buf);</span><br><span class="line">int msgid &#x3D; 1;</span><br><span class="line">MQTTString topicString &#x3D; MQTTString_initializer;</span><br><span class="line">int req_qos &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int payloadlen &#x3D; strlen(payload);</span><br><span class="line">int len &#x3D; 0;</span><br><span class="line"></span><br><span class="line">stop_init();</span><br><span class="line">if (argc &gt; 1)</span><br><span class="line">host &#x3D; argv[1];</span><br><span class="line"></span><br><span class="line">if (argc &gt; 2)</span><br><span class="line">port &#x3D; atoi(argv[2]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果使用SIM800，这个函数没什么用，可以把SIM800初始化的东西放到里面，但我没有这么做</span><br><span class="line">mysock &#x3D; transport_open(host, port);</span><br><span class="line">if(mysock &lt; 0)</span><br><span class="line">return mysock;</span><br><span class="line"></span><br><span class="line">printf(&quot;Sending to hostname %s port %d\n&quot;, host, port);</span><br><span class="line"></span><br><span class="line">data.clientID.cstring &#x3D; &quot;me&quot;;</span><br><span class="line">data.keepAliveInterval &#x3D; 20;</span><br><span class="line">data.cleansession &#x3D; 1;</span><br><span class="line">data.username.cstring &#x3D; &quot;testuser&quot;;</span><br><span class="line">data.password.cstring &#x3D; &quot;testpassword&quot;;</span><br><span class="line">    &#x2F;&#x2F;现在将连接字符串格式化一下，现在还没有发送</span><br><span class="line">len &#x3D; MQTTSerialize_connect(buf, buflen, &amp;data);</span><br><span class="line">    &#x2F;&#x2F;现在是数据的发送</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line"></span><br><span class="line">&#x2F;* wait for connack *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;发送后接收服务器返回的数据，这里使用了一个函数的指针，要定义这个指针</span><br><span class="line">if (MQTTPacket_read(buf, buflen, transport_getdata) &#x3D;&#x3D; CONNACK)</span><br><span class="line">&#123;</span><br><span class="line">unsigned char sessionPresent, connack_rc;</span><br><span class="line"> </span><br><span class="line">if (MQTTDeserialize_connack(&amp;sessionPresent, &amp;connack_rc, buf, buflen) !&#x3D; 1 || connack_rc !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Unable to connect, return code %d\n&quot;, connack_rc);</span><br><span class="line">goto exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">goto exit;</span><br><span class="line"></span><br><span class="line">&#x2F;* subscribe *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;订阅主题</span><br><span class="line">topicString.cstring &#x3D; &quot;substopic&quot;;</span><br><span class="line">len &#x3D; MQTTSerialize_subscribe(buf, buflen, 0, msgid, 1, &amp;topicString, &amp;req_qos);</span><br><span class="line"></span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line">    &#x2F;&#x2F;等待服务器答复</span><br><span class="line">if (MQTTPacket_read(buf, buflen, transport_getdata) &#x3D;&#x3D; SUBACK) &#x2F;* wait for suback *&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">unsigned short submsgid;</span><br><span class="line">int subcount;</span><br><span class="line">int granted_qos;</span><br><span class="line"> </span><br><span class="line">rc &#x3D; MQTTDeserialize_suback(&amp;submsgid, 1, &amp;subcount, &amp;granted_qos, buf, buflen);</span><br><span class="line">if (granted_qos !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;granted qos !&#x3D; 0, %d\n&quot;, granted_qos);</span><br><span class="line">goto exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">goto exit;</span><br><span class="line"></span><br><span class="line">&#x2F;* loop getting msgs on subscribed topic *&#x2F;</span><br><span class="line">topicString.cstring &#x3D; &quot;pubtopic&quot;;</span><br><span class="line">while (!toStop)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* transport_getdata() has a built-in 1 second timeout,</span><br><span class="line">your mileage will vary *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;接收并处理消息</span><br><span class="line">if (MQTTPacket_read(buf, buflen, transport_getdata) &#x3D;&#x3D; PUBLISH)</span><br><span class="line">&#123;</span><br><span class="line">unsigned char dup;</span><br><span class="line">int qos;</span><br><span class="line">unsigned char retained;</span><br><span class="line">unsigned short msgid;</span><br><span class="line">int payloadlen_in;</span><br><span class="line">unsigned char* payload_in;</span><br><span class="line">int rc;</span><br><span class="line">MQTTString receivedTopic;</span><br><span class="line"></span><br><span class="line">rc &#x3D; MQTTDeserialize_publish(&amp;dup, &amp;qos, &amp;retained, &amp;msgid, &amp;receivedTopic, &amp;payload_in, &amp;payloadlen_in, buf, buflen);</span><br><span class="line">printf(&quot;message arrived %.*s\n&quot;, payloadlen_in, payload_in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;publishing reading\n&quot;);</span><br><span class="line">len &#x3D; MQTTSerialize_publish(buf, buflen, 0, 0, 0, 0, topicString, (unsigned char*)payload, payloadlen);</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;disconnecting\n&quot;);</span><br><span class="line">len &#x3D; MQTTSerialize_disconnect(buf, buflen);</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">transport_close(mysock);</span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>重写transport.h、transport.c适应keil工程<a href="https://blog.csdn.net/xj178926426/article/details/78888633" target="_blank">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int transport_sendPacketBuffer(unsigned char* buf, int buflen);</span><br><span class="line">int transport_getdata(unsigned char* buf, int count);</span><br><span class="line">int transport_open(char* host, int port);</span><br><span class="line">int transport_close();</span><br></pre></td></tr></table></figure><details><summary>参考main.h</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    u16 key_value&#x3D; 0, retry_count &#x3D; 5;</span><br><span class="line">    unsigned short submsgid;</span><br><span class="line">    unsigned char buf[MQTT_MAX_BUF_SIZE];</span><br><span class="line">    unsigned char sessionPresent, connack_rc;</span><br><span class="line">    const char* payload &#x3D; &quot;mypayload&quot;;</span><br><span class="line">    int payloadlen &#x3D; strlen(payload);</span><br><span class="line">    int ret &#x3D; 0,len &#x3D; 0,req_qos &#x3D; 0,msgid &#x3D; 1,loop &#x3D; 1,granted_qos,subcount;</span><br><span class="line"></span><br><span class="line">    MQTTString topicString &#x3D; MQTTString_initializer;</span><br><span class="line">    MQTTPacket_connectData data &#x3D; MQTTPacket_connectData_initializer;</span><br><span class="line"></span><br><span class="line">    SysTick_Init_Config();   &#x2F;&#x2F;系统滴答时钟初始化</span><br><span class="line">    GPIO_Config();           &#x2F;&#x2F;GPIO初始化</span><br><span class="line">    Key_GPIO_Config();</span><br><span class="line">    USART2_Init_Config(115200);  &#x2F;&#x2F;串口2初始化</span><br><span class="line">    Timer2_Init_Config();        &#x2F;&#x2F;定时器2初始化</span><br><span class="line"></span><br><span class="line">    USART1_Init_Config(115200);&#x2F;&#x2F;UART1用作串口调试信息</span><br><span class="line"></span><br><span class="line">    UART1_SendString(&quot;系统启动.......................\r\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;等待系统上电后的稳定</span><br><span class="line">    delays(STABLE_TIMES);</span><br><span class="line"></span><br><span class="line">    data.clientID.cstring &#x3D; &quot;me&quot;;</span><br><span class="line">    data.keepAliveInterval &#x3D; 20;</span><br><span class="line">    data.cleansession &#x3D; 1;</span><br><span class="line">    data.username.cstring &#x3D; &quot;testuser&quot;;</span><br><span class="line">    data.password.cstring &#x3D; &quot;testpassword&quot;;</span><br><span class="line"></span><br><span class="line">    len &#x3D; MQTTSerialize_connect(buf, MQTT_MAX_BUF_SIZE, &amp;data);</span><br><span class="line">    UART1_Printf(&quot;1111 len %d\n&quot;, len);</span><br><span class="line">    ret &#x3D; transport_sendPacketBuffer(MQTT_SERVER_IP_AND_PORT, buf, len);</span><br><span class="line">    if( ret !&#x3D; 1 )&#123;</span><br><span class="line">        UART1_Printf(&quot;1111 transport_sendPacketBuffer Error %d\n&quot;, ret);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;* wait for connack *&#x2F;</span><br><span class="line">    if (MQTTPacket_read(buf, MQTT_MAX_BUF_SIZE, transport_getdata) !&#x3D; CONNACK)</span><br><span class="line">    &#123;</span><br><span class="line">        UART1_Printf(&quot;MQTTPacket_read !&#x3D; CONNACK\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    if (MQTTDeserialize_connack(&amp;sessionPresent, &amp;connack_rc, buf, MQTT_MAX_BUF_SIZE) !&#x3D; 1 || connack_rc !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        UART1_Printf(&quot;Unable to connect, return code %d\n&quot;, connack_rc);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    topicString.cstring &#x3D; &quot;substopic&quot;;</span><br><span class="line">    len &#x3D; MQTTSerialize_subscribe(buf, MQTT_MAX_BUF_SIZE, 0, msgid, 1, &amp;topicString, &amp;req_qos);</span><br><span class="line">    UART1_Printf(&quot;2222 len %d\n&quot;, len);</span><br><span class="line">    ret &#x3D; transport_sendPacketBuffer(MQTT_SERVER_IP_AND_PORT, buf, len);</span><br><span class="line">    if( ret !&#x3D; 1 )&#123;</span><br><span class="line">        UART1_Printf(&quot;2222 transport_sendPacketBuffer Error %d\n&quot;, ret);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (MQTTPacket_read(buf, MQTT_MAX_BUF_SIZE, transport_getdata) !&#x3D; SUBACK)   &#x2F;* wait for suback *&#x2F;</span><br><span class="line">    &#123;</span><br><span class="line">        UART1_Printf(&quot;MQTTPacket_read !&#x3D; SUBACK\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MQTTDeserialize_suback(&amp;submsgid, 1, &amp;subcount, &amp;granted_qos, buf, MQTT_MAX_BUF_SIZE);</span><br><span class="line">    if (granted_qos !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        UART1_Printf(&quot;granted qos !&#x3D; 0, %d\n&quot;, granted_qos);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* loop getting msgs on subscribed topic *&#x2F;</span><br><span class="line">    topicString.cstring &#x3D; &quot;pubtopic&quot;;</span><br><span class="line"></span><br><span class="line">    while( loop )&#123; </span><br><span class="line"></span><br><span class="line">        key_value &#x3D; Key_Down_Scan();</span><br><span class="line">        &#x2F;&#x2F; add by james_xie 20171221 ,for debug</span><br><span class="line">        UART1_Printf(&quot;key_value %d\r\n&quot;,key_value);</span><br><span class="line">        &#x2F;&#x2F; 按键KEY1即PA5被按下则跳出循环</span><br><span class="line">        if( key_value &#x3D;&#x3D; 0x0001 &lt;&lt; 5 )&#123;</span><br><span class="line">            UART1_Printf(&quot;Key1 is pressed down , exit \r\n&quot;);</span><br><span class="line">            loop &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;* transport_getdata() has a built-in 1 second timeout,</span><br><span class="line">        your mileage will vary *&#x2F;</span><br><span class="line">        if (MQTTPacket_read(buf, MQTT_MAX_BUF_SIZE, transport_getdata) &#x3D;&#x3D; PUBLISH)</span><br><span class="line">        &#123;</span><br><span class="line">            int qos,payloadlen_in;</span><br><span class="line">            unsigned char dup,retained;</span><br><span class="line">            unsigned short msgid;</span><br><span class="line">            unsigned char* payload_in;</span><br><span class="line">            MQTTString receivedTopic;</span><br><span class="line"></span><br><span class="line">            MQTTDeserialize_publish(&amp;dup, &amp;qos, &amp;retained, &amp;msgid, &amp;receivedTopic,</span><br><span class="line">                    &amp;payload_in, &amp;payloadlen_in, buf, MQTT_MAX_BUF_SIZE);</span><br><span class="line">            UART1_Printf(&quot;message arrived %.*s\n&quot;, payloadlen_in, payload_in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UART1_Printf(&quot;publishing reading\n&quot;);</span><br><span class="line">        len &#x3D; MQTTSerialize_publish(buf, MQTT_MAX_BUF_SIZE, 0, 0, 0, 0, topicString, (unsigned char*)payload, payloadlen);</span><br><span class="line">        UART1_Printf(&quot;33333 len %d\n&quot;, len);</span><br><span class="line">        &#x2F;&#x2F; 重复发送5次，如果5次都不成功，则退出程序</span><br><span class="line">        while( retry_count &gt; 0 )&#123;</span><br><span class="line">            ret &#x3D; transport_sendPacketBuffer(MQTT_SERVER_IP_AND_PORT, buf, len);</span><br><span class="line">            &#x2F;&#x2F; 如果发送成功则跳出循环</span><br><span class="line">            if( ret &#x3D;&#x3D; 1 )&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            delays(1);</span><br><span class="line">        &#125;</span><br><span class="line">        if( !retry_count &amp;&amp; ret !&#x3D; 1 )&#123;</span><br><span class="line">             UART1_Printf(&quot;3333 transport_sendPacketBuffer Error %d\n&quot;, ret);</span><br><span class="line">             break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 每次发送之后，等两秒</span><br><span class="line">        delays(2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UART1_Printf(&quot;disconnecting\n&quot;);</span><br><span class="line">    len &#x3D; MQTTSerialize_disconnect(buf, MQTT_MAX_BUF_SIZE);</span><br><span class="line">    ret &#x3D; transport_sendPacketBuffer(MQTT_SERVER_IP_AND_PORT, buf, len);</span><br><span class="line">    if( ret !&#x3D; 1 )&#123;</span><br><span class="line">        UART1_Printf(&quot;4444 transport_sendPacketBuffer Error %d\n&quot;, ret);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><a href="https://blog.csdn.net/qq_39785798/article/details/80765716" target="_blank">基于STM32实现MQTT（mqtt.h + mqtt.c）</a></p><details><summary>mqtt.h</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __MQTT_H</span><br><span class="line">#define __MQTT_H </span><br><span class="line">#include &quot;sys.h&quot;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#defineMQTT_TypeCONNECT1&#x2F;&#x2F;请求连接  </span><br><span class="line">#defineMQTT_TypeCONNACK2&#x2F;&#x2F;请求应答  </span><br><span class="line">#defineMQTT_TypePUBLISH3&#x2F;&#x2F;发布消息  </span><br><span class="line">#defineMQTT_TypePUBACK4&#x2F;&#x2F;发布应答  </span><br><span class="line">#defineMQTT_TypePUBREC5&#x2F;&#x2F;发布已接收，保证传递1  </span><br><span class="line">#defineMQTT_TypePUBREL6&#x2F;&#x2F;发布释放，保证传递2  </span><br><span class="line">#defineMQTT_TypePUBCOMP7&#x2F;&#x2F;发布完成，保证传递3  </span><br><span class="line">#defineMQTT_TypeSUBSCRIBE8&#x2F;&#x2F;订阅请求  </span><br><span class="line">#defineMQTT_TypeSUBACK9&#x2F;&#x2F;订阅应答  </span><br><span class="line">#defineMQTT_TypeUNSUBSCRIBE10&#x2F;&#x2F;取消订阅  </span><br><span class="line">#defineMQTT_TypeUNSUBACK11&#x2F;&#x2F;取消订阅应答  </span><br><span class="line">#defineMQTT_TypePINGREQ12&#x2F;&#x2F;ping请求  </span><br><span class="line">#defineMQTT_TypePINGRESP13&#x2F;&#x2F;ping响应  </span><br><span class="line">#defineMQTT_TypeDISCONNECT 14&#x2F;&#x2F;断开连接  </span><br><span class="line"> </span><br><span class="line">#defineMQTT_StaCleanSession1&#x2F;&#x2F;清理会话 </span><br><span class="line">#defineMQTT_StaWillFlag0&#x2F;&#x2F;遗嘱标志</span><br><span class="line">#defineMQTT_StaWillQoS0&#x2F;&#x2F;遗嘱QoS连接标志的第4和第3位。</span><br><span class="line">#defineMQTT_StaWillRetain0&#x2F;&#x2F;遗嘱保留</span><br><span class="line">#defineMQTT_StaUserNameFlag1&#x2F;&#x2F;用户名标志 User Name Flag</span><br><span class="line">#defineMQTT_StaPasswordFlag1&#x2F;&#x2F;密码标志 Password Flag</span><br><span class="line">#defineMQTT_KeepAlive60</span><br><span class="line">#defineMQTT_ClientIdentifier  &quot;Tan1&quot;&#x2F;&#x2F;客户端标识符 Client Identifier</span><br><span class="line">#defineMQTT_WillTopic&quot;&quot;&#x2F;&#x2F;遗嘱主题 Will Topic</span><br><span class="line">#defineMQTT_WillMessage&quot;&quot;&#x2F;&#x2F;遗嘱消息 Will Message</span><br><span class="line">#defineMQTT_UserName&quot;admin&quot;&#x2F;&#x2F;用户名 User Name</span><br><span class="line">#defineMQTT_Password&quot;password&quot;&#x2F;&#x2F;密码 Password</span><br><span class="line"> </span><br><span class="line">unsigned char GetDataFixedHead(unsigned char MesType,unsigned char DupFlag,unsigned char QosLevel,unsigned char Retain);</span><br><span class="line">void GetDataPUBLISH(unsigned char *buff,unsigned char dup, unsigned char qos,unsigned char retain,const char *topic ,const char *msg);&#x2F;&#x2F;获取发布消息的数据包 </span><br><span class="line">void GetDataSUBSCRIBE(unsigned char *buff,const char *dat,unsigned int Num,unsigned char RequestedQoS);&#x2F;&#x2F;订阅主题的数据包 Num:主题序号 RequestedQoS:服务质量要求0,1或2</span><br><span class="line">void GetDataDisConnect(unsigned char *buff);&#x2F;&#x2F;获取断开连接的数据包</span><br><span class="line">void GetDataConnect(unsigned char *buff);&#x2F;&#x2F;获取连接的数据包正确连接返回20 02 00 00</span><br><span class="line">void GetDataPINGREQ(unsigned char *buff);&#x2F;&#x2F;心跳请求的数据包成功返回d0 00</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></details><details><summary>mqtt.c</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mqtt.h&quot;</span><br><span class="line"> </span><br><span class="line">unsigned char GetDataFixedHead(unsigned char MesType,unsigned char DupFlag,unsigned char QosLevel,unsigned char Retain)</span><br><span class="line">&#123;</span><br><span class="line">unsigned char dat &#x3D; 0;</span><br><span class="line">dat &#x3D; (MesType &amp; 0x0f) &lt;&lt; 4;</span><br><span class="line">dat |&#x3D; (DupFlag &amp; 0x01) &lt;&lt; 3;</span><br><span class="line">dat |&#x3D; (QosLevel &amp; 0x03) &lt;&lt; 1;</span><br><span class="line">dat |&#x3D; (Retain &amp; 0x01);</span><br><span class="line">return dat;</span><br><span class="line">&#125;</span><br><span class="line">void GetDataConnect(unsigned char *buff)&#x2F;&#x2F;获取连接的数据包正确连接返回20 02 00 00</span><br><span class="line">&#123;</span><br><span class="line">unsigned int i,len,lennum &#x3D; 0;</span><br><span class="line">unsigned char *msg;</span><br><span class="line">buff[0] &#x3D; GetDataFixedHead(MQTT_TypeCONNECT,0,0,0);</span><br><span class="line">buff[2] &#x3D; 0x00;</span><br><span class="line">buff[3] &#x3D; 0x04;</span><br><span class="line">buff[4] &#x3D; &#39;M&#39;;</span><br><span class="line">buff[5] &#x3D; &#39;Q&#39;;</span><br><span class="line">buff[6] &#x3D; &#39;T&#39;;</span><br><span class="line">buff[7] &#x3D; &#39;T&#39;;</span><br><span class="line">buff[8] &#x3D; 0x04;&#x2F;&#x2F;协议级别 Protocol Level</span><br><span class="line">buff[9] &#x3D; 0 | (MQTT_StaCleanSession &lt;&lt; 1) | (MQTT_StaWillFlag &lt;&lt; 1)</span><br><span class="line">| (MQTT_StaWillQoS &lt;&lt; 3) | (MQTT_StaWillRetain &lt;&lt; 5) </span><br><span class="line">|(MQTT_StaPasswordFlag &lt;&lt; 6) |(MQTT_StaUserNameFlag &lt;&lt; 7);&#x2F;&#x2F;连接标志</span><br><span class="line">buff[10] &#x3D; MQTT_KeepAlive &gt;&gt; 8;</span><br><span class="line">buff[11] &#x3D; MQTT_KeepAlive;</span><br><span class="line">len &#x3D; strlen(MQTT_ClientIdentifier);</span><br><span class="line">buff[12] &#x3D; len &gt;&gt; 8;</span><br><span class="line">buff[13] &#x3D; len;</span><br><span class="line">msg &#x3D; MQTT_ClientIdentifier;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[14+i] &#x3D;  msg[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum +&#x3D; len;</span><br><span class="line">if(MQTT_StaWillFlag)</span><br><span class="line">&#123;</span><br><span class="line">len &#x3D; strlen(MQTT_WillTopic);</span><br><span class="line">buff[13 + lennum + 1] &#x3D; len &gt;&gt; 8;</span><br><span class="line">buff[13 + lennum + 2] &#x3D; len;</span><br><span class="line">lennum +&#x3D; 2;</span><br><span class="line">msg &#x3D; MQTT_WillTopic;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[14+lennum+i] &#x3D;  msg[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum +&#x3D; len;</span><br><span class="line">len &#x3D; strlen(MQTT_WillMessage);</span><br><span class="line">buff[12] &#x3D; len &gt;&gt; 8;</span><br><span class="line">buff[13] &#x3D; len;</span><br><span class="line">lennum +&#x3D; 2;</span><br><span class="line">msg &#x3D; MQTT_WillMessage;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[14+lennum+i] &#x3D;  msg[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum +&#x3D; len;</span><br><span class="line">&#125;</span><br><span class="line">if(MQTT_StaUserNameFlag)</span><br><span class="line">&#123;</span><br><span class="line">len &#x3D; strlen(MQTT_UserName);</span><br><span class="line">buff[13 + lennum + 1] &#x3D; len &gt;&gt; 8;</span><br><span class="line">buff[13 + lennum + 2] &#x3D; len;</span><br><span class="line">lennum +&#x3D; 2;</span><br><span class="line">msg &#x3D; MQTT_UserName;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[14+lennum+i] &#x3D;  msg[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum +&#x3D; len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(MQTT_StaPasswordFlag)</span><br><span class="line">&#123;</span><br><span class="line">len &#x3D; strlen(MQTT_Password);</span><br><span class="line">buff[13 + lennum + 1] &#x3D; len &gt;&gt; 8;</span><br><span class="line">buff[13 + lennum + 2] &#x3D; len;</span><br><span class="line">lennum +&#x3D; 2;</span><br><span class="line">msg &#x3D; MQTT_Password;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[14+lennum+i] &#x3D;  msg[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum +&#x3D; len;</span><br><span class="line">&#125;</span><br><span class="line">buff[1] &#x3D; 13 + lennum - 1;</span><br><span class="line">&#125;</span><br><span class="line">void GetDataDisConnect(unsigned char *buff)&#x2F;&#x2F;获取断开连接的数据包</span><br><span class="line">&#123;</span><br><span class="line">buff[0] &#x3D; 0xe0;</span><br><span class="line">buff[1] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">void GetDataPINGREQ(unsigned char *buff)&#x2F;&#x2F;心跳请求的数据包成功返回d0 00</span><br><span class="line">&#123;</span><br><span class="line">buff[0] &#x3D; 0xc0;</span><br><span class="line">buff[1] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">成功返回90 0x 00 Num RequestedQoS</span><br><span class="line">*&#x2F;</span><br><span class="line">void GetDataSUBSCRIBE(unsigned char *buff,const char *dat,unsigned int Num,unsigned char RequestedQoS)&#x2F;&#x2F;订阅主题的数据包 Num:主题序号 RequestedQoS:服务质量要求0,1或2</span><br><span class="line">&#123;</span><br><span class="line">unsigned int i,len &#x3D; 0,lennum &#x3D; 0; </span><br><span class="line">buff[0] &#x3D; 0x82;</span><br><span class="line">len &#x3D; strlen(dat);</span><br><span class="line">buff[2] &#x3D; Num&gt;&gt;8;</span><br><span class="line">buff[3] &#x3D; Num;</span><br><span class="line">buff[4] &#x3D; len&gt;&gt;8;</span><br><span class="line">buff[5] &#x3D; len;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[6+i] &#x3D; dat[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum &#x3D; len;</span><br><span class="line">buff[6 + lennum ] &#x3D; RequestedQoS;</span><br><span class="line">buff[1] &#x3D; lennum + 5;</span><br><span class="line">&#125;</span><br><span class="line">void GetDataPUBLISH(unsigned char *buff,unsigned char dup, unsigned char qos,unsigned char retain,const char *topic ,const char *msg)&#x2F;&#x2F;获取发布消息的数据包</span><br><span class="line">&#123;</span><br><span class="line">unsigned int i,len&#x3D;0,lennum&#x3D;0;</span><br><span class="line">buff[0] &#x3D; GetDataFixedHead(MQTT_TypePUBLISH,dup,qos,retain);</span><br><span class="line">len &#x3D; strlen(topic);</span><br><span class="line">buff[2] &#x3D; len&gt;&gt;8;</span><br><span class="line">buff[3] &#x3D; len;</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[4+i] &#x3D; topic[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum &#x3D; len;</span><br><span class="line">len &#x3D; strlen(msg);</span><br><span class="line">for(i &#x3D; 0;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">buff[4+i+lennum] &#x3D; msg[i];</span><br><span class="line">&#125;</span><br><span class="line">lennum +&#x3D; len;</span><br><span class="line">buff[1] &#x3D; lennum + 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MQTTPacket.h&lt;br&gt;transport.h&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] esp8266+http</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670551000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670551000.html/</id>
    <published>2020-01-10T15:35:51.000Z</published>
    <updated>2020-01-10T15:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f4xx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"./usart/bsp_debug_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"systick/bsp_SysTick.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DHT11/bsp_dht11.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bsp_SysTick.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"./ESP8266/bsp_esp8266.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"./test/test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bsp_led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bsp_beep.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>  <span class="built_in">string</span>[ <span class="number">300</span> ] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  主函数</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*初始化USART，配置模式为 115200 8-N-1*/</span></span><br><span class="line">Debug_USART_Config();</span><br><span class="line"><span class="comment">/* 系统定时器初始化 */</span></span><br><span class="line">SysTick_Init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//缺定时器2的初始化</span></span><br><span class="line"></span><br><span class="line">ESP8266_Init ();</span><br><span class="line">LED_GPIO_Config ();</span><br><span class="line">BEEP_GPIO_Config ();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DHT11初始化 */</span></span><br><span class="line">DHT11_GPIO_Config();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n野火F429挑战者APP控制开发板实验***\r\n"</span>);</span><br><span class="line"></span><br><span class="line">ESP8266_StaTcpClient_UnvarnishTest ();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* path = <span class="string">"POST /mobile/Example/query.php?phoneNo=13333333333 HTTP/1.1\r\n"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* contentType = <span class="string">"Content-Type: application/json;charset=utf-8\r\n"</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"Host:apis.juhe.cn\r\n"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* contentLength = <span class="string">"Content-Length:&#123;%s&#125;\r\n"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* connection =  <span class="string">"Connection: Keep Alive\r\n\r\n"</span>;</span><br><span class="line"><span class="keyword">char</span>* header = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(path) + <span class="built_in">strlen</span>(contentType) + <span class="built_in">strlen</span>(host) + <span class="built_in">strlen</span>(contentLength) + <span class="built_in">strlen</span>(connection));</span><br><span class="line"><span class="built_in">strcpy</span>(header, path);</span><br><span class="line"><span class="built_in">strcat</span>(header, contentType);</span><br><span class="line"><span class="built_in">strcat</span>(header, host);</span><br><span class="line"><span class="built_in">strcat</span>(header, contentLength);</span><br><span class="line"><span class="built_in">strcat</span>(header, connection);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="built_in">sprintf</span>(<span class="built_in">string</span>, header, <span class="built_in">strlen</span>(header));</span><br><span class="line">ESP8266_SendString(ENABLE, <span class="built_in">string</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">Delay_ms(<span class="number">10000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] ESP8266_WIFI模块</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670550000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670550000.html/</id>
    <published>2020-01-10T15:35:50.000Z</published>
    <updated>2020-01-10T15:35:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_38410730/article/details/86538288" target="_blank">【常用模块】ESP8266 WIFI串口通信模块使用详解（实例：附STM32详细代码）</a><br><a href="https://blog.csdn.net/qq_17242837/article/details/72464956" target="_blank">STM32单片机ESP8266发送数据到WiFi接收端代码实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_38410730/article/details/86538288&quot; target=&quot;_blank&quot;&gt;【常用模块】ESP8266 WIFI串口通信模块使用详解（实例：附STM32详细代码）&lt;/a&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] EMW1062_WIFI视频传输</title>
    <link href="http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670549000.html/"/>
    <id>http://brightereyer.xyz/2020/01/10/articles/2020/01/10/1578670549000.html/</id>
    <published>2020-01-10T15:35:49.000Z</published>
    <updated>2020-01-10T15:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.firebbs.cn/forum.php?mod=viewthread&tid=26091&highlight=stm32f407" target="_blank">STM32F407内置WEB服务器实现wifi视频传输语音识别物体人脸识别开发介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.firebbs.cn/forum.php?mod=viewthread&amp;tid=26091&amp;highlight=stm32f407&quot; target=&quot;_blank&quot;&gt;STM32F407内置WEB服务器实现wifi视频传输语音识别物体人
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
</feed>
