<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BrighterEyer</title>
  
  <subtitle>用心看清世界，驻足停留一会儿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://brightereyer.xyz/"/>
  <updated>2020-01-08T12:05:01.000Z</updated>
  <id>http://brightereyer.xyz/</id>
  
  <author>
    <name>brightereyer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[stm32] keil5添加头文件</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578485101000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578485101000.html/</id>
    <published>2020-01-08T12:05:01.000Z</published>
    <updated>2020-01-08T12:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/baby00qi/article/details/53056099" target="_blank">在 Keil5 中添加 .h 文件的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/baby00qi/article/details/53056099&quot; target=&quot;_blank&quot;&gt;在 Keil5 中添加 .h 文件的问题&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[单片机] ESP8266使用AT命令进行网络请求</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484449000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484449000.html/</id>
    <published>2020-01-08T11:54:09.000Z</published>
    <updated>2020-01-08T11:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_28877125/article/details/73028338" target="_blank">ESP8266–学习笔记–AT指令下进行HTTP连接网址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_28877125/article/details/73028338&quot; target=&quot;_blank&quot;&gt;ESP8266–学习笔记–AT指令下进行HTTP连接网址&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="单片机" scheme="http://brightereyer.xyz/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>[zigbee] zstack协议栈介绍与安装</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484448000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484448000.html/</id>
    <published>2020-01-08T11:54:08.000Z</published>
    <updated>2020-01-08T11:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_38064214/article/details/77326463" target="_blank">ZigBee TI ZStack CC2530 3.6 创建基于ZStack的新工程</a><br><a href="http://www.ti.com.cn/tool/cn/z-stack" target="_blank" rel="noopener">官方ZStack-CC2530下载</a></p><p><a href="https://pan.baidu.com/s/1JHpi202srO6VhPX6EY3Tlw" target="_blank">zigbee网关开发板V4.0.rar(含zstack)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取码:</span><br><span class="line">nuw4</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/10KlVnhM-GslH-O7SDLHsng" target="_blank">ZIGBEE网关开发板视频教程-网关篇</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zigbee开发板-基础篇视频教程</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av67397775</span><br><span class="line"></span><br><span class="line">zigbee网关开发板-高级篇视频教程</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av67449058</span><br><span class="line"></span><br><span class="line">zigbee网关开发板--网关篇视频教程</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av67450897</span><br><span class="line"></span><br><span class="line">zigbee网关开发板-实战篇远程视频教程</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av67449719</span><br><span class="line"></span><br><span class="line">zigbee网关开发板--终结篇远程视频教程</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av67450240</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weilexuexi12/article/details/71374307" target="_blank">ZigBee协议栈Zstack介绍</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">APP：应用层目录，这是用户创建各种不同工程的区域，在这个目录中包含了应用层的内容和这个项目的主要内容，在协议栈里面一般是以操作系统的任务实现的。</span><br><span class="line"></span><br><span class="line">HAL：硬件层目录，包含有与硬件相关的配置和驱动及操作函数。</span><br><span class="line"></span><br><span class="line">MAC：MAC层目录，包含了MAC层的参数配置文件及其MAC的LIB库的函数接口文件。</span><br><span class="line"></span><br><span class="line">MT：监控调试层，主要用于调试目的的，即实现通过串口调试各层，与各层进行直接交互。</span><br><span class="line"></span><br><span class="line">NWK：网络层目录，涵网络层配置参数文件及网络层库的函数接口文件，APS层库的函数接口。</span><br><span class="line"></span><br><span class="line">OSAL：协议栈的操作系统。</span><br><span class="line"></span><br><span class="line">Profile：AF层目录，包含AF层处理函数文件。</span><br><span class="line"></span><br><span class="line">Security：安全层目录，安全层处理函数接口文件，比如加密函数等。</span><br><span class="line"></span><br><span class="line">Services：地址处理函数目录，包括着地址模式的定义及地址处理函数。</span><br><span class="line"></span><br><span class="line">Tools：工程配置目录，包括空间划分和Zstack相关的配置信息。</span><br><span class="line"></span><br><span class="line">ZDO：ZDO目录。</span><br><span class="line"></span><br><span class="line">ZMac：MAC层目录，包括MAC层参数配置及MAC层LIB库函数回调处理函数。</span><br><span class="line"></span><br><span class="line">ZMain：主函数目录，包括入口函数main（）及硬件配置文件。</span><br><span class="line"></span><br><span class="line">Output：输出文件目录层，这个EW8051 IDE自主设计的。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_33697898/article/details/85821372" target="_blank">Zigbee协议栈介绍及简单例子</a><br><img src="https://images2015.cnblogs.com/blog/506370/201607/506370-20160731000342466-1592540828.png"></p><p>SampleApp目录<br><img src="https://images2015.cnblogs.com/blog/506370/201607/506370-20160731005459763-749308991.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_38064214/article/details/77326463&quot; target=&quot;_blank&quot;&gt;ZigBee TI ZStack CC2530 3.6 创建基于ZStack的新工程&lt;/a&gt;&lt;br&gt;&lt;a
      
    
    </summary>
    
    
    
      <category term="zigbee" scheme="http://brightereyer.xyz/tags/zigbee/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 野火STM32f429_v1资料</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484447000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484447000.html/</id>
    <published>2020-01-08T11:54:07.000Z</published>
    <updated>2020-01-08T11:54:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1UaISAMHE2-z4CVI3ivVCHQ" target="_blank">野火STM32F429挑战者_V1开发板资料链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取码：</span><br><span class="line">9mn0</span><br></pre></td></tr></table></figure><p>若上述链接失效，请直接下载以下打包压缩的版本，内容是一样的：</p><p><a href="https://pan.baidu.com/s/1SSkvtbe0KIqNNb_L7hiarw" target="_blank">打包的资料盘 链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取码：</span><br><span class="line">onvk</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1MgjvUyFR1e9UPbRlw9coLw" target="_blank">视频盘 链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取码：</span><br><span class="line">e2cp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1UaISAMHE2-z4CVI3ivVCHQ&quot; target=&quot;_blank&quot;&gt;野火STM32F429挑战者_V1开发板资料链接&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 野火STM32F429_v1仿真器连接问题</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484446000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484446000.html/</id>
    <published>2020-01-08T11:54:06.000Z</published>
    <updated>2020-01-08T11:54:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="" target="_blank"></a></p><p>查看设备列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">win + R</span><br><span class="line">devmgmt.msc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">顶部-&gt;查看(V)-&gt;显示隐藏的设备(W)</span><br><span class="line"></span><br><span class="line">列表框展开-&gt;libusb-win32 devices -&gt; 观察 BETTER_USB_HS</span><br><span class="line">列表框展开-&gt;端口(COM和LPT)、观察 USB-SERIAL CH341、USB-SERIAL CH340</span><br><span class="line">列表框展开-&gt;Cebal controlled devices -&gt; 观察 zigbee仿真器驱动 SmartRF40EB</span><br><span class="line">列表框展开-&gt;通用串行总线控制器 -&gt; 观察 未知USB设备(设备描述符请求失败) 、USB 根集线器(USB3.0)</span><br></pre></td></tr></table></figure><p>解决过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、Windows+R打开运行，在运行的输入框中输入&quot;services.msc&quot;回车，打开服务。</span><br><span class="line">2、在服务中找到 &quot;Plug and Play&quot; 服务，将服务关闭，再启用。</span><br><span class="line">3、在服务列表中找到 &quot;Device Install Service&quot; 和 &quot;Device Setup Manager&quot; 两个服务项。</span><br><span class="line">4、将设备管理器中的出现问题的设备右键卸载，然后将设备上的USB外设移除。</span><br><span class="line">5、卸载libusb-win32 devices下的驱动</span><br><span class="line">6、拔出所有单片机接线</span><br><span class="line">7、重启后将USB外设重新接入，扫描检测硬件改动，再次查看设备管理器中的问题是否还存在。</span><br><span class="line">8、安装再次CH341SER_EXE</span><br></pre></td></tr></table></figure><p>win10 keil5识别不了DAP，卸载驱动后可以下载<br><a href="https://blog.csdn.net/Rambo122/article/details/101018816" target="_blank">卸载libusb-win32 devices下的驱动</a></p><p><a href="https://jingyan.baidu.com/article/624e74594dbc8d34e8ba5aa6.html" target="_blank">禁用数字签名</a></p><p><a href="http://www.wch.cn/download/CH341SER_EXE.html" target="_blank">CH341SER_EXE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看设备列表&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] wifi透传+websocket</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484445000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484445000.html/</id>
    <published>2020-01-08T11:54:05.000Z</published>
    <updated>2020-01-08T11:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>java工程<br><a href="https://github.com/ajith-varghese/zigbee-mqtt-bridge" target="_blank">zigbee-mqtt-bridge</a><br>介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Converts websocket (on zigbee controller) to MQTT messages</span><br></pre></td></tr></table></figure><p>stm32f10x websocket<br><a href="https://github.com/ittopone/websocket_stm32" target="_blank">websocket_stm32</a></p><p><a href="https://blog.csdn.net/xj178926426/article/details/78888633" target="_blank">在GPRS模块（GA6）和STM32F103C8T6单片机上移植MQTT协议</a></p><p><a href="https://blog.csdn.net/WIZnet2012/article/details/47401241" target="_blank">STM32+W5500+MQTT+Android实现远程数据采集及控制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* @brief  通过TCP方式发送数据到TCP服务器</span><br><span class="line">* @param  buf 数据首地址</span><br><span class="line">* @param  buflen 数据长度</span><br><span class="line">* @retval 小于0表示发送失败</span><br><span class="line">*&#x2F;</span><br><span class="line">int transport_sendPacketBuffer(unsigned char* buf, int buflen)</span><br><span class="line">&#123;</span><br><span class="line">return send(SOCK_TCPS, buf, buflen);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;**</span><br><span class="line">* @brief  阻塞方式接收TCP服务器发送的数据</span><br><span class="line">* @param  buf 数据存储首地址</span><br><span class="line">* @param  count 数据缓冲区长度</span><br><span class="line">* @retval 小于0表示接收数据失败</span><br><span class="line">*&#x2F;</span><br><span class="line">int transport_getdata(unsigned char* buf, int count)</span><br><span class="line">&#123;</span><br><span class="line">return recv(SOCK_TCPS, buf, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* @brief  打开一个socket并连接到服务器</span><br><span class="line">* @param  无</span><br><span class="line">* @retval 小于0表示打开失败</span><br><span class="line">*&#x2F;</span><br><span class="line">int transport_open(void)</span><br><span class="line">&#123;</span><br><span class="line">int32_t ret;</span><br><span class="line">&#x2F;&#x2F;新建一个Socket并绑定本地端口5000</span><br><span class="line">ret &#x3D; socket(SOCK_TCPS, Sn_MR_TCP, 5000, 0×00);</span><br><span class="line">if (ret !&#x3D; SOCK_TCPS) &#123;</span><br><span class="line">printf(&quot; % d: Socket Error\r\n&quot;, SOCK_TCPS);</span><br><span class="line">while (1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot; % d: Opened\r\n&quot;, SOCK_TCPS);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;连接TCP服务器</span><br><span class="line">ret &#x3D; connect(SOCK_TCPS, domain_ip, 1883); &#x2F;&#x2F;端口必须为1883</span><br><span class="line">if (ret !&#x3D; SOCK_OK) &#123;</span><br><span class="line">printf(&quot; % d: Socket Connect Error\r\n&quot;, SOCK_TCPS);</span><br><span class="line">while (1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot; % d: Connected\r\n&quot;, SOCK_TCPS);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* @brief  关闭socket</span><br><span class="line">* @param  无</span><br><span class="line">* @retval 小于0表示关闭失败</span><br><span class="line">*&#x2F;</span><br><span class="line">int transport_close(void)</span><br><span class="line">&#123;</span><br><span class="line">close(SOCK_TCPS);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* @brief  向代理（服务器）发送一个消息</span><br><span class="line">* @param  pTopic 消息主题</span><br><span class="line">* @param  pMessage 消息内容</span><br><span class="line">* @retval 小于0表示发送失败</span><br><span class="line">*&#x2F;</span><br><span class="line">int mqtt_publish(char *pTopic, char *pMessage)</span><br><span class="line">&#123;</span><br><span class="line">int32_t len, rc;</span><br><span class="line">MQTTPacket_connectData data &#x3D; MQTTPacket_connectData_initializer;</span><br><span class="line">unsigned char buf[200];</span><br><span class="line">MQTTString topicString &#x3D; MQTTString_initializer;</span><br><span class="line">int msglen &#x3D; strlen(pMessage);</span><br><span class="line">int buflen &#x3D; sizeof(buf);</span><br><span class="line"></span><br><span class="line">data.clientID.cstring &#x3D; &quot;me&quot;;</span><br><span class="line">data.keepAliveInterval &#x3D; 5;</span><br><span class="line">data.cleansession &#x3D; 1;</span><br><span class="line">len &#x3D; MQTTSerialize_connect(buf, buflen, &amp;data); &#x2F;* 1 *&#x2F;</span><br><span class="line"></span><br><span class="line">topicString.cstring &#x3D; pTopic;</span><br><span class="line">len +&#x3D; MQTTSerialize_publish(buf + len, buflen – len, 0, 0, 0, 0, topicString, (unsigned char*)pMessage, msglen); &#x2F;* 2 *&#x2F;</span><br><span class="line"></span><br><span class="line">len +&#x3D; MQTTSerialize_disconnect(buf + len, buflen – len); &#x2F;* 3 *&#x2F;</span><br><span class="line">transport_open();</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(buf, len);</span><br><span class="line">transport_close();</span><br><span class="line">if (rc &#x3D;&#x3D; len)</span><br><span class="line">printf(&quot;Successfully published\n\r&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;Publish failed\n\r&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">static char meassage[200];</span><br><span class="line">int rc;</span><br><span class="line">char *led;</span><br><span class="line">char led_value;</span><br><span class="line">float temperature, humidity, light, pressure;</span><br><span class="line">srand(0);</span><br><span class="line">&#x2F;&#x2F;配置LED灯引脚</span><br><span class="line">LED_Config();</span><br><span class="line">&#x2F;&#x2F;初始化配置网络</span><br><span class="line">network_init();</span><br><span class="line">while (1) &#123;</span><br><span class="line">memset(meassage, 0, sizeof(meassage));</span><br><span class="line">&#x2F;&#x2F;订阅消息</span><br><span class="line">rc &#x3D; mqtt_subscrib(&quot;pyboard_led&quot;, meassag e);</span><br><span class="line">printf(&quot;rc &#x3D; % d\n\r&quot;, rc);</span><br><span class="line">if (rc &gt;&#x3D; 0) &#123;</span><br><span class="line">printf(&quot;meassage &#x3D; % s\n\r&quot;, meassage);</span><br><span class="line">&#x2F;&#x2F;解析JSON格式字符串并点亮相应的LED灯</span><br><span class="line">cJSON *root &#x3D; cJSON_Parse(meassage);</span><br><span class="line">if (root !&#x3D; NULL) &#123;</span><br><span class="line">led &#x3D; cJSON_GetObjectItem(root, &quot;led&quot;)-&gt;valuestring;</span><br><span class="line">printf(&quot;led &#x3D; % s\n\r&quot;, led);</span><br><span class="line">led_value &#x3D; cJSON_GetObjectItem(root, &quot;value&quot;)-&gt;valueint;</span><br><span class="line">if (!strcmp(led, &quot;red&quot;)) &#123;</span><br><span class="line">if (led_value) &#123;</span><br><span class="line">LED_On(LED_RED);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">LED_Off(LED_RED);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (!strcmp(led, &quot;green&quot;)) &#123;</span><br><span class="line">if (led_value) &#123;</span><br><span class="line">LED_On(LED_GREEN);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">LED_Off(LED_GREEN);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (!strcmp(led, &quot;blue&quot;)) &#123;</span><br><span class="line">if (led_value) &#123;</span><br><span class="line">LED_On(LED_BLUE);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">LED_Off(LED_BLUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (!strcmp(led, &quot;yellow&quot;)) &#123;</span><br><span class="line">if (led_value) &#123;</span><br><span class="line">LED_On(LED_YELLOW);</span><br><span class="line">printf(&quot;Yellow On\n\r&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">LED_Off(LED_YELLOW);</span><br><span class="line">printf(&quot;Yellow Off\n\r&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 释放内存空间</span><br><span class="line">cJSON_Delete(root);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Error before: [ % s]\n\r&quot;, cJSON_GetErrorPtr());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取传感器测量数据，该示例使用随机数</span><br><span class="line">temperature &#x3D; rand() % 50;</span><br><span class="line">humidity &#x3D; rand() % 100;</span><br><span class="line">light &#x3D; rand() % 1000;</span><br><span class="line">pressure &#x3D; rand() % 1000;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将数据合成为JSON格式数据</span><br><span class="line">sprintf(meassage, &quot; &#123;\&quot;temperature\&quot;: % .1f, \&quot;humidity\&quot;: % .1f, \&quot;light\&quot;: % .1f, \&quot;pressure\&quot;: % .1f&#125;&quot;, temperature, humidity, light, pressure);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将数据发送出去</span><br><span class="line">mqtt_publish(&quot;pyboard_value&quot;, meassage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文章<br><a href="https://blog.csdn.net/kh766200466/article/details/79694119" target="_blank">stm32移植mqtt</a><br>1、下载MQTT的库：<br><a href="https://github.com/eclipse/paho.mqtt.embedded-c/tree/master/MQTTPacket" target="_blank">MQTTPacket</a></p><p>2、将MQTTPacket\src目录下的文件添加到工程</p><p>3、MQTTPacket\samples下的transport.c、transport.h添加到工程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接收数据,recv函数仅仅是copy数据，真正的接收数据是协议来完成的）， recv函数返回其实际copy的字节数。</span><br><span class="line">int transport_getdata(unsigned char* buf, int count)</span><br><span class="line">&#123;</span><br><span class="line">int rc &#x3D; 0;</span><br><span class="line">u16 len &#x3D; 0;</span><br><span class="line">u8 *data &#x3D; 0;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">if (UART7_RX_STA &amp; 0X8000)  &#x2F;&#x2F;接收到一次数据了</span><br><span class="line">&#123;</span><br><span class="line">memcpy(buf, (void*)&amp;UART7_RX_BUF[read_buf_len], count);</span><br><span class="line">read_buf_len +&#x3D; count;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">delay_ms(10);</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要调用的地方实现订阅发布和读取订阅</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打开网络连接</span><br><span class="line">mysock &#x3D; transport_open(host, port);</span><br><span class="line">if (mysock &lt; 0)</span><br><span class="line">return mysock;</span><br><span class="line"></span><br><span class="line">printf(&quot;Sending to hostname %s port %d\n&quot;, host, port);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;现在将连接字符串格式化一下，现在还没有发送</span><br><span class="line">len &#x3D; MQTTSerialize_connect(buf, buflen, &amp;data);</span><br><span class="line">printf(&quot;%s&quot;, buf);</span><br><span class="line">&#x2F;&#x2F;现在是数据的发送</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line">&#x2F;* 等待connack *&#x2F;&#x2F;&#x2F;发送后接收服务器返回的数据，这里使用了一个函数的指针，要定义这个指针</span><br><span class="line">if (MQTTPacket_read(buf, buflen, transport_getdata) &#x3D;&#x3D; CONNACK) &#123;&#x2F;&#x2F;CONNACK – 确认连接请求</span><br><span class="line">unsigned char sessionPresent, connack_rc</span><br><span class="line">if (MQTTDeserialize_connack(&amp;sessionPresent, &amp;connack_rc, buf, buflen) !&#x3D; 1 || connack_rc !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Unable to connect, return code %d\n&quot;, connack_rc);</span><br><span class="line">goto exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">goto exit;</span><br><span class="line"></span><br><span class="line">&#x2F;* 订阅 *&#x2F;</span><br><span class="line">topicString.cstring &#x3D; &quot;substopic&quot;;</span><br><span class="line">len &#x3D; MQTTSerialize_subscribe(buf, buflen, 0, msgid, 1, &amp;topicString, &amp;req_qos);</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line">&#x2F;&#x2F;等待服务器答复</span><br><span class="line">&#x2F;&#x2F;SUBACK 订阅确认 报文包含一个返回码清单， 它们指定了 SUBSCRIBE 请求的每个订阅被授予的最大 QoS 等级。</span><br><span class="line">if (MQTTPacket_read(buf, buflen, transport_getdata) &#x3D;&#x3D; SUBACK)  &#x2F;* 等待 suback *&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">unsigned short submsgid;</span><br><span class="line">int subcount;</span><br><span class="line">int granted_qos;</span><br><span class="line">rc &#x3D; MQTTDeserialize_suback(&amp;submsgid, 1, &amp;subcount, &amp;granted_qos, buf, buflen);</span><br><span class="line">if (granted_qos !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;granted qos !&#x3D; 0, %d\n&quot;, granted_qos);</span><br><span class="line">goto exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">goto exit;</span><br><span class="line">&#x2F;* 循环获取消息 on subscribed topic *&#x2F;</span><br><span class="line">&#x2F;&#x2F;  topicString.cstring &#x3D; &quot;pubtopic&quot;;</span><br><span class="line">&#x2F;&#x2F;  while (1)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* transport_getdata() has a built-in 1 second timeout,</span><br><span class="line">your mileage will vary *&#x2F;</span><br><span class="line">if (MQTTPacket_read(buf, buflen, transport_getdata) &#x3D;&#x3D; PUBLISH)&#x2F;&#x2F;qos 响应报文，当qos&gt;0时才有响应</span><br><span class="line">&#123;</span><br><span class="line">unsigned char dup;</span><br><span class="line">int qos;</span><br><span class="line">unsigned char retained;</span><br><span class="line">unsigned short msgid;</span><br><span class="line">int payloadlen_in;</span><br><span class="line">unsigned char* payload_in;</span><br><span class="line">int rc;</span><br><span class="line">MQTTString receivedTopic;</span><br><span class="line">rc &#x3D; MQTTDeserialize_publish(&amp;dup, &amp;qos, &amp;retained, &amp;msgid, &amp;receivedTopic,</span><br><span class="line">                             &amp;payload_in, &amp;payloadlen_in, buf, buflen);</span><br><span class="line">printf(&quot;message arrived %.*s\n&quot;, payloadlen_in, payload_in); &#x2F;&#x2F;消息到达</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;publishing reading\n&quot;);&#x2F;&#x2F;读取发布</span><br><span class="line">&#x2F;&#x2F;下面两行是用来发布消息。这里发布，上面订阅，就形成了一个循环。</span><br><span class="line">len &#x3D; MQTTSerialize_publish(buf, buflen, 0, 0, 0, 0, topicString, (unsigned char*)payload, payloadlen);</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);</span><br><span class="line">delay_ms(1000);</span><br><span class="line">&#125;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">len &#x3D; MQTTSerialize_pingreq(buf, buflen);&#x2F;&#x2F;发送心跳</span><br><span class="line">rc &#x3D; transport_sendPacketBuffer(mysock, buf, len);&#x2F;&#x2F;发送</span><br><span class="line">delay_s(55);</span><br><span class="line">printf(&quot;心跳&quot;);</span><br><span class="line">&#125;</span><br><span class="line">exit:</span><br><span class="line">transport_close(mysock);</span><br><span class="line"></span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java工程&lt;br&gt;&lt;a href=&quot;https://github.com/ajith-varghese/zigbee-mqtt-bridge&quot; target=&quot;_blank&quot;&gt;zigbee-mqtt-bridge&lt;/a&gt;&lt;br&gt;介绍&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[qt] mqtt客户端</title>
    <link href="http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484444000.html/"/>
    <id>http://brightereyer.xyz/2020/01/08/articles/2020/01/08/1578484444000.html/</id>
    <published>2020-01-08T11:54:04.000Z</published>
    <updated>2020-01-08T11:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="" target="_blank"></a></p><p><a href="https://www.cnblogs.com/yexiaopeng/p/8542894.html" target="_blank">Qt官方MQTT库的使用，附一个MqttClient例子</a></p><p><a href="https://blog.csdn.net/qq_28877125/article/details/78357510" target="_blank">MQTT–Qt5编写MQTT-client客户端</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yexiaopeng/p/8542894.html&quot; target=&quot;_blank&quot;&gt;Qt官方MQTT库的使用，附一个MqttCl
      
    
    </summary>
    
    
    
      <category term="qt" scheme="http://brightereyer.xyz/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>[qt] QtCreator跟PyQt5冲突打不开的问题</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311658000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311658000.html/</id>
    <published>2020-01-06T11:54:18.000Z</published>
    <updated>2020-01-06T11:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>只需要两步即可解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.把QT下面的bin文件夹下所有的dll复制到exe同级目录下，尽管有些可能用不到；</span><br><span class="line"></span><br><span class="line">2.把QT下面的platforms文件夹也复制到exe同级别目录下，如我的platforms文件夹位于D:\Qt\Qt5.4.0\5.4\msvc2013_64\plugins\platforms，只需要直接复制这个platforms文件夹！</span><br></pre></td></tr></table></figure><p>参考1：<br><a href="https://blog.csdn.net/jzwong/article/details/71479691" target="_blank">QT移植无法启动 This application failed to start because it could not find or load the Qt platform plugin</a><br>参考2：<br><a href="https://blog.csdn.net/NSSC_K/article/details/88670686" target="_blank">this application failed to start because no Qt platform</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只需要两步即可解决：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
    
      <category term="qt" scheme="http://brightereyer.xyz/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>[linux] 查看网关</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311657000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311657000.html/</id>
    <published>2020-01-06T11:54:17.000Z</published>
    <updated>2020-01-06T11:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="" target="_blank"></a></p><p>Linux下查看网关方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1、</span><br><span class="line">route -n</span><br><span class="line"></span><br><span class="line">2、</span><br><span class="line">ip route show</span><br><span class="line"></span><br><span class="line">3、【第一行就是自己的网关】</span><br><span class="line">traceroute www.prudentwoo.com -s 100</span><br><span class="line"></span><br><span class="line">4、</span><br><span class="line">netstat -r</span><br><span class="line"></span><br><span class="line">5、 【Debian&#x2F;Ubuntu Linux】</span><br><span class="line">more &#x2F;etc&#x2F;network&#x2F;interfaces</span><br><span class="line"></span><br><span class="line">6、 【Red Hat Linux】</span><br><span class="line">more &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux下查看网关方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://brightereyer.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>[js] 车牌输入</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311656000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311656000.html/</id>
    <published>2020-01-06T11:54:16.000Z</published>
    <updated>2020-01-06T11:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.jq22.com/jquery-info19439" target="_blank">jQuery快速车牌号码输入</a></p><p>关于微信手机端IOS系统中input输入框无法输入的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-user-select:auto;</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/q/1010000012115950" target="_blank">怎样实现将用户在input框中输入的中英文混合字符(车牌)中的字母实时转换为大写</a><br>css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则表达式限制input框只能输入车牌号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; onkeyup&#x3D;&quot;if (!&#x2F;^[\u4e00-\u9fa5]&#123;1&#125;([A-Z]&#123;1&#125;([A-Z_0-9]&#123;1,5&#125;)?)?$&#x2F;.test(value)) value &#x3D; value.replace(&#x2F;[\s\S]$&#x2F;, &#39;&#39;)&quot;&gt;</span><br></pre></td></tr></table></figure><p>联合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input style&#x3D;&quot;text-transform: uppercase;&quot; onkeyup&#x3D;&quot;if (!&#x2F;^[\u4e00-\u9fa5]&#123;1&#125;([A-Z]&#123;1&#125;([A-Z_0-9]&#123;1,5&#125;)?)?$&#x2F;.test(value)) value &#x3D; value.replace(&#x2F;[\s\S]$&#x2F;, &#39;&#39;)&quot; maxlength&#x3D;&quot;10&quot; placeholder&#x3D;&quot;请输入车牌号码&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.jq22.com/jquery-info19439&quot; target=&quot;_blank&quot;&gt;jQuery快速车牌号码输入&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于微信手机端IOS系统中input输入框无法输入的问题&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="js" scheme="http://brightereyer.xyz/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>[DevOps] 免费的DevOps</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311655000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311655000.html/</id>
    <published>2020-01-06T11:54:15.000Z</published>
    <updated>2020-01-06T11:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://coding.net/pricing" target="_blank">5 人及以下团队永久免费，5 人以上免费试用 15 天</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://coding.net/pricing&quot; target=&quot;_blank&quot;&gt;5 人及以下团队永久免费，5 人以上免费试用 15 天&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="DevOps" scheme="http://brightereyer.xyz/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 智能手环</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311654000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311654000.html/</id>
    <published>2020-01-06T11:54:14.000Z</published>
    <updated>2020-01-06T11:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Raymaa/SmartHouse" target="_blank">含 智能手环</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于STM32单片机，硬件传感器感知室内环境数据并上传至服务器，具有通过前端页面，手机App远程实时监控室内环境、控制相应设备和远程预警等功能。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Raymaa/SmartHouse&quot; target=&quot;_blank&quot;&gt;含 智能手环&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 开发工具</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311653000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311653000.html/</id>
    <published>2020-01-06T11:54:13.000Z</published>
    <updated>2020-01-06T11:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>STM32 开发工具</p><p>====  TrueSTUDIO start  ====<br><a href="https://atollic.com/truestudio/" target="_blank">TrueSTUDIO</a><br><a href="https://atollic.com/resources/download/windows/windows-archive/?submissionGuid=6a9df4f2-76ee-4575-adac-7d5172666c12" target="_blank">Windows archive </a><br><a href="http://download.atollic.com/TrueSTUDIO/installers/Atollic_TrueSTUDIO_for_STM32_windows_x86_v9.2.0_20181203-0921.exe" target="_blank">Atollic_TrueSTUDIO_for_STM32_windows_x86_v9.2.0_20181203-0921.exe</a><br>====  TrueSTUDIO end  ====</p><p>====  keil MDK ARM start  ====<br><a href="http://products.embedfire.com/zh_CN/latest/stm32/ebf_stm32f429_tiaozhanzhe_v1.html" target="_blank">野火STM32F429挑战者_V1开发板</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">野火STM32F429挑战者_V1开发板资料链接：</span><br><span class="line"></span><br><span class="line">资料盘链接：</span><br><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1UaISAMHE2-z4CVI3ivVCHQ</span><br><span class="line">提取码：</span><br><span class="line">9mn0</span><br></pre></td></tr></table></figure><p>====  keil MDK ARM end  ====</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;STM32 开发工具&lt;/p&gt;
&lt;p&gt;====  TrueSTUDIO start  ====&lt;br&gt;&lt;a href=&quot;https://atollic.com/truestudio/&quot; target=&quot;_blank&quot;&gt;TrueSTUDIO&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[stm32] 基于STM32的RGB调色器</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311652000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311652000.html/</id>
    <published>2020-01-06T11:54:12.000Z</published>
    <updated>2020-01-06T11:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/whik1194/article/details/102750994" target="_blank">基于STM32的RGB调色器——STM32程序和Qt上位机全开源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/whik1194/article/details/102750994&quot; target=&quot;_blank&quot;&gt;基于STM32的RGB调色器——STM32程序和Qt上位机全开源&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="stm32" scheme="http://brightereyer.xyz/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>[arm] 开发工具</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311650000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311650000.html/</id>
    <published>2020-01-06T11:54:10.000Z</published>
    <updated>2020-01-06T11:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tutorial.linux.doc.embedfire.com/zh_CN/latest/" target="_blank">[野火]i.MX Linux开发实战指南</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[野火]i.MX Linux开发实战指南</span><br><span class="line"></span><br><span class="line">搭建并熟悉开发环境：</span><br><span class="line">1. 为什么学习Linux开发</span><br><span class="line">2. i.MX系列芯片简介</span><br><span class="line">3. Linux系统简介</span><br><span class="line">4. 安装Ubuntu系统</span><br><span class="line">5. Linux文件目录</span><br><span class="line">6. 用户组与文件权限</span><br><span class="line">7. 使用Linux命令行</span><br><span class="line">8. 包管理工具</span><br><span class="line">9. 使用编辑器</span><br><span class="line">10. 野火EBF 6ULL 开发板硬件资源介绍</span><br><span class="line">11. 让开发板跑起来</span><br><span class="line">12. 查看系统信息</span><br><span class="line">13. 使用命令点灯和检测按键</span><br><span class="line">14. 使用脚本测试硬件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Linux下开发应用程序：</span><br><span class="line">1. 挂载NFS网络文件系统</span><br><span class="line">2. GCC和Hello World</span><br><span class="line">3. 文件操作与系统调用</span><br><span class="line">4. 控制LED灯设备（LED子系统）</span><br><span class="line">5. 控制蜂鸣器（GPIO子系统）</span><br><span class="line">6. 检测按键输入（input子系统）</span><br><span class="line">7. 串口通讯与终端设备</span><br><span class="line">8. I2C通讯</span><br><span class="line">9. SPI通讯</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装系统镜像：</span><br><span class="line">1. 使用Etcher烧录镜像到SD卡</span><br><span class="line">2. 使用sd卡烧录完整镜像</span><br><span class="line">3. MFGtool工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">制作系统镜像：</span><br><span class="line">1. 系统运行所需要的组件</span><br><span class="line">2. 编译内核</span><br><span class="line">3. 编译uboot</span><br><span class="line">4. 制作根文件系统</span><br><span class="line">5. 给开发板移植debian发行版</span><br><span class="line">6. 制作ubuntu core版本镜像</span><br><span class="line">7. 使用Buildroot编译</span><br><span class="line">8. 使用yocot构建镜像</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i.MX6 裸机开发：</span><br><span class="line">1. 熟悉sdk</span><br><span class="line">2. 编译下载官方SDK程序到开发板</span><br><span class="line">3. 开发前准备</span><br><span class="line">4. 汇编点亮LED灯</span><br><span class="line">5. 点亮LED灯</span><br><span class="line">6. LED灯进阶——C语言实现</span><br><span class="line">7. 完善LED程序</span><br><span class="line">8. GPIO输入—按键查询检测</span><br><span class="line">9. 整理工程文件</span><br><span class="line">10. 中断</span><br><span class="line">11. 时钟控制模块（CCM）</span><br><span class="line">12. UART—串口通讯</span><br><span class="line">13. DDR测试</span><br><span class="line">14. eLCDIF—液晶显示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux驱动开发：</span><br><span class="line">1. 字符设备驱动</span><br><span class="line">2. 内核模块</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://tutorial.linux.doc.embedfire.com/zh_CN/latest/&quot; target=&quot;_blank&quot;&gt;[野火]i.MX Linux开发实战指南&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
    
      <category term="arm" scheme="http://brightereyer.xyz/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>[arm] ubuntu+QEMU虚拟化模拟器+vexpress开发板</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311648000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311648000.html/</id>
    <published>2020-01-06T11:54:08.000Z</published>
    <updated>2020-01-06T11:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">80%的嵌入式知识和技能，其实都跟开发板无关。</span><br><span class="line">你可以直接在Ubuntu上练习编程，也可以使用QEMU模拟一款ARM开发板，在这款虚拟的开发板上可以跑U-boot、kernel、NFS。</span><br><span class="line">如果嫌安装配置麻烦的话，也可以直接下载已经安装配置好的Ubuntu镜像，将镜像下载到本地后，使用VMware打开即可直接运行。</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1FPbKMi8K0jkrix6p2DNp5g" target="_blank">QEMU虚拟机镜像下载链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取码:</span><br><span class="line">rsnt</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/94833e841742" target="_blank">Qemu搭建ARM vexpress开发环境(一)</a><br><a href="https://www.jianshu.com/p/db8c20aa6a69" target="_blank">QEMU简介</a><br><a href="https://www.huaweicloud.com/kunpeng/software/qemu.html" target="_blank">QEMU虚拟化模拟器</a></p><p>Linux 上安装QEMU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.qemu.org&#x2F;qemu-4.0.0.tar.xz</span><br><span class="line">tar xvJf qemu-4.0.0.tar.xz</span><br><span class="line">cd qemu-4.0.0</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;torvalds&#x2F;linux.git</span><br></pre></td></tr></table></figure><p>安装arm的交叉编译工具链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabi</span><br></pre></td></tr></table></figure><p>编译Linux内核，生成vexpress开发板子的config文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CROSS_COMPILE&#x3D;arm-linux-gnueabi- ARCH&#x3D;arm vexpress_defconfig</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make CROSS_COMPILE&#x3D;arm-linux-gnueabi- ARCH&#x3D;arm</span><br><span class="line"></span><br><span class="line">#生成的内核镱像位于arch&#x2F;arm&#x2F;boot&#x2F;zImage， 后续qemu启动时需要使用该镜像。</span><br></pre></td></tr></table></figure><p>下载和安装qemu模拟器<br>其实Ubuntu 12.04有qemu的安装包，但由于版本较低，对vexpress开发板支持不友好，建议下载高版本的qemu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;wiki.qemu-project.org&#x2F;download&#x2F;qemu-2.0.2.tar.bz2</span><br></pre></td></tr></table></figure><p>配置qemu前，需要安装几个软件包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y zlib1g-dev libglib2.0-0 libglib2.0-dev</span><br></pre></td></tr></table></figure><p>配置qemu，支持模拟arm架构下的所有单板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --target-list&#x3D;arm-softmmu --audio-drv-list&#x3D;</span><br></pre></td></tr></table></figure><p>编译和安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>测试qemu和内核能否运行成功<br>qemu已经安装好了，内核也编译成功了，到这里最好是测试一下，编译出来的内核是否OK，或者qemu对vexpress单板支持是否够友好。</p><p>运行命令很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 512M -kernel &#x2F;path&#x2F;to&#x2F;kernel&#x2F;dir&#x2F;arch&#x2F;arm&#x2F;boot&#x2F;zImage -dtb  &#x2F;path&#x2F;to&#x2F;kernel&#x2F;dir&#x2F;arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;vexpress-v2p-ca9.dtb -nographic -append &quot;console&#x3D;ttyAMA0&quot;</span><br><span class="line"></span><br><span class="line">#这里的 &#x2F;path&#x2F;to&#x2F;kernel&#x2F;dir&#x2F;  是内核的下载目录，或者编译目录。</span><br><span class="line">#如果看到内核启动过程中的打印，说明前面的搭建是成功的。</span><br></pre></td></tr></table></figure><p>下载、编译和安装busybox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www.busybox.net&#x2F;downloads&#x2F;busybox-1.20.2.tar.bz2</span><br><span class="line">make defconfig</span><br><span class="line">make CROSS_COMPILE&#x3D;arm-linux-gnueabi-</span><br><span class="line">make install CROSS_COMPILE&#x3D;arm-linux-gnueabi-</span><br></pre></td></tr></table></figure><p>安装完成后，会在busybox目录下生成_install目录，该目录下的程序就是单板运行所需要的命令。</p><p>形成根目录结构<br>先在Ubuntu主机环境下，形成目录结构，里面存放的文件和目录与单板上运行所需要的目录结构完全一样，然后再打包成镜像（在开发板看来就是SD卡），这个临时的目录结构称为根目录</p><p>1.创建rootfs目录（根目录），根文件系统内的文件全部放到这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p rootfs&#x2F;&#123;dev,etc&#x2F;init.d,lib&#125;</span><br></pre></td></tr></table></figure><p>2.拷贝busybox命令到根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp busybox-1.20.2&#x2F;_install&#x2F;* -r rootfs&#x2F;</span><br></pre></td></tr></table></figure><p>3.从工具链中拷贝运行库到lib目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -P &#x2F;usr&#x2F;arm-linux-gnueabi&#x2F;lib&#x2F;* rootfs&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure><p>4.创建4个tty端终设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mknod rootfs&#x2F;dev&#x2F;tty1 c 4 1</span><br><span class="line"></span><br><span class="line">sudo mknod rootfs&#x2F;dev&#x2F;tty2 c 4 2</span><br><span class="line"></span><br><span class="line">sudo mknod rootfs&#x2F;dev&#x2F;tty3 c 4 3</span><br><span class="line"></span><br><span class="line">sudo mknod rootfs&#x2F;dev&#x2F;tty4 c 4 4</span><br></pre></td></tr></table></figure><p>制作根文件系统镜像<br>1.生成32M大小的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;a9rootfs.ext3 bs&#x3D;1M count&#x3D;32</span><br></pre></td></tr></table></figure><p>2.格式化成ext3文件系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3 a9rootfs.ext3</span><br></pre></td></tr></table></figure><p>3.将文件拷贝到镜像中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir tmpfs</span><br><span class="line">sudo mount -t ext3 a9rootfs.ext3 tmpfs&#x2F; -o loop</span><br><span class="line">sudo cp -r rootfs&#x2F;*  tmpfs&#x2F;</span><br><span class="line">sudo umount tmpfs</span><br></pre></td></tr></table></figure><p>系统启动运行<br>完成上述所有步骤之后，就可以启动qemu来模拟vexpress开发板了，命令参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 512M -kernel &#x2F;path&#x2F;to&#x2F;kernel&#x2F;dir&#x2F;arch&#x2F;arm&#x2F;boot&#x2F;zImage -dtb  &#x2F;path&#x2F;to&#x2F;kernel&#x2F;dir&#x2F;arch&#x2F;arm&#x2F;boot&#x2F;dts&#x2F;vexpress-v2p-ca9.dtb -nographic -append &quot;root&#x3D;&#x2F;dev&#x2F;mmcblk0  console&#x3D;ttyAMA0&quot; -sd a9rootfs.ext3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
      <category term="arm" scheme="http://brightereyer.xyz/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>[arm] 智能门锁系统设计</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311647000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311647000.html/</id>
    <published>2020-01-06T11:54:07.000Z</published>
    <updated>2020-01-06T11:54:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wenku.baidu.com/view/1e4f8b192bf90242a8956bec0975f46527d3a727.html" target="_blank">基于ARM_Linux的智能门锁系统设计_王溢琴</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://wenku.baidu.com/view/1e4f8b192bf90242a8956bec0975f46527d3a727.html&quot; target=&quot;_blank&quot;&gt;基于ARM_Linux的智能门锁系统设计_王溢琴&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="arm" scheme="http://brightereyer.xyz/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>[arm] iTop6818教程</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311646000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311646000.html/</id>
    <published>2020-01-06T11:54:06.000Z</published>
    <updated>2020-01-06T11:54:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://bbs.topeetboard.com/forum.php?mod=forumdisplay&fid=44" target="_blank">讯为iTOP-6818开发板技术专区</a><br><a href="https://pan.baidu.com/s/1kV4jt47" target="_blank">iTop6818资料</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提取码：</span><br><span class="line">bjg0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://bbs.topeetboard.com/forum.php?mod=forumdisplay&amp;fid=44&quot; target=&quot;_blank&quot;&gt;讯为iTOP-6818开发板技术专区&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pan.bai
      
    
    </summary>
    
    
    
      <category term="arm" scheme="http://brightereyer.xyz/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>[物联网] zigbee+MQTT服务器</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311644000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311644000.html/</id>
    <published>2020-01-06T11:54:04.000Z</published>
    <updated>2020-01-06T11:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>===============================  MQTT start  ===============================</p><p>====  客户端 start  ====<br><a href="https://github.com/search?utf8=%E2%9C%93&q=android+MQTT&ref=simplesearch" target="_blank">android客户端</a><br><a href="https://www.hangge.com/blog/cache/detail_2350.html" target="_blank">航歌 - MQTTBox</a><br><a href="https://www.cnblogs.com/yexiaopeng/p/8542894.html" target="_blank">Qt官方MQTT库的使用，附一个MqttClient例子</a><br><a href="https://blog.csdn.net/qq_32865083/article/details/78638781" target="_blank">QT版MQTT客户端</a><br><a href="https://www.chromefor.com/mqttlens_v0-0-14/" target="_blank">chrome插件MQTTLens</a><br>====  客户端 end  ====</p><p>====  linux start  ====<br><a href="https://www.hangge.com/blog/cache/detail_2609.html" target="_blank">Docker - 在容器中搭建运行EMQ服务器（MQTT服务器）</a><br><a href="https://blog.csdn.net/kxwinxp/article/details/86592457" target="_blank">CentOS上搭建EMQ MQTT服务器</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">docker run --name emqtt -p 18083:18083 -p 1883:1883 -p 8084:8084 -p 8883:8883 -p 8083:8083 -p 8080:8080 -d emqx&#x2F;emqx</span><br><span class="line">docker exec -it emqtt &#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">ls &#x2F;opt&#x2F;emqx&#x2F;etc</span><br><span class="line">acl.conf       certs          emqx.conf      lwm2m_xml      plugins        psk.txt        ssl_dist.conf  vm.args</span><br><span class="line"></span><br><span class="line">ls &#x2F;opt&#x2F;emqx&#x2F;etc&#x2F;plugins</span><br><span class="line">acl.conf.paho                emqx_auth_jwt.conf           emqx_auth_redis.conf         emqx_delayed_publish.conf    emqx_psk_file.conf           emqx_sn.conf</span><br><span class="line">ekka.conf.example            emqx_auth_ldap.conf          emqx_auth_username.conf      emqx_lua_hook.conf           emqx_recon.conf              emqx_statsd.conf</span><br><span class="line">ekka.config.example          emqx_auth_mongo.conf         emqx_bridge_mqtt.conf        emqx_lwm2m.conf              emqx_reloader.conf           emqx_stomp.conf</span><br><span class="line">emqx_auth_clientid.conf      emqx_auth_mysql.conf         emqx_coap.conf               emqx_management.conf         emqx_retainer.conf           emqx_web_hook.conf</span><br><span class="line">emqx_auth_http.conf          emqx_auth_pgsql.conf         emqx_dashboard.conf          emqx_plugin_template.config  emqx_rule_engine.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#EMQ配置“ClientId 认证”</span><br><span class="line">cat &#x2F;opt&#x2F;emqx&#x2F;etc&#x2F;plugins&#x2F;emqx_auth_clientid.conf</span><br><span class="line">auth.client.1.clientid &#x3D; id</span><br><span class="line">auth.client.1.password &#x3D; passwd</span><br><span class="line">auth.client.password_hash &#x3D; sha256</span><br><span class="line"></span><br><span class="line">cat &#x2F;opt&#x2F;emqx&#x2F;etc&#x2F;plugins&#x2F;emqx_auth_username.conf</span><br><span class="line">auth.user.1.username &#x3D; admin</span><br><span class="line">auth.user.1.password &#x3D; public</span><br><span class="line">auth.user.password_hash &#x3D; sha256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 开启匿名认证</span><br><span class="line">cat &#x2F;opt&#x2F;emqx&#x2F;etc&#x2F;emqx.conf | grep allow_anonymous</span><br><span class="line">## Allow Anonymous authentication</span><br><span class="line">allow_anonymous &#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 命令     作用</span><br><span class="line">&#x2F;opt&#x2F;emqx&#x2F;bin&#x2F;emqx start       # 启动emqtt</span><br><span class="line">&#x2F;opt&#x2F;emqx&#x2F;bin&#x2F;emqx stop        # 关闭emqtt</span><br><span class="line">&#x2F;opt&#x2F;emqx&#x2F;bin&#x2F;emqx restart     # 重启emqtt</span><br><span class="line">&#x2F;opt&#x2F;emqx&#x2F;bin&#x2F;emqx_ctl status  # 查看emqtt状态</span><br><span class="line">&#x2F;opt&#x2F;emqx&#x2F;bin&#x2F;emqx_ctl plugins load emqx_auth_clientid  # 加载认证插件</span><br><span class="line"></span><br><span class="line"># EMQ X R3.0 消息服务器默认占用的 TCP 端口包括:</span><br><span class="line"># 端口用途</span><br><span class="line">1883MQTT 协议端口</span><br><span class="line">8883MQTT&#x2F;SSL 端口</span><br><span class="line">8083MQTT&#x2F;WebSocket 端口</span><br><span class="line">8080HTTP API 端口</span><br><span class="line">18083Dashboard 管理控制台端口</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u011267225/article/details/81982515" target="_blank">那些年用EMQ踩过的坑</a></p><p>参考：<a href="https://www.jianshu.com/p/dc0e8716a77a" target="_blank">centos 7 安装mqtt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#docker run --name mqtt -p 18083:18083 -p 1883:1883 -p 8084:8084 -p 8883:8883 -p 8083:8083 -d centos</span><br><span class="line"></span><br><span class="line">docker search mqtt</span><br><span class="line">docker run --name mqtt -p 18083:18083 -p 1883:1883 -p 8084:8084 -p 8883:8883 -p 8083:8083 -d eclipse-mosquitto</span><br><span class="line">docker attach mqtt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">yum install mosquitto mosquitto-clients</span><br><span class="line"># 启动mosquitto</span><br><span class="line">mosquitto -c &#x2F;etc&#x2F;mosquitto&#x2F;mosquitto.conf -d</span><br><span class="line">mosquitto -v</span><br><span class="line"></span><br><span class="line"># 将1883 和8080端口打开（如果是阿里云服务器，需要去阿里云后台安全组策略管理页面打开端口）</span><br><span class="line"># firewall-cmd --zone&#x3D;public --add-port&#x3D;1883&#x2F;tcp --permanent</span><br><span class="line"># firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line"># firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">WebSocket地址:</span><br><span class="line">192.168.99.100:8083&#x2F;mqtt</span><br><span class="line"></span><br><span class="line">TCP端口:</span><br><span class="line">1883</span><br></pre></td></tr></table></figure><p>测试MQTT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 订阅主题</span><br><span class="line">mosquitto_sub -v -t topicTest01</span><br><span class="line"></span><br><span class="line"># 发布内容</span><br><span class="line">mosquitto_pub -t topicTest01 -m TestMessage</span><br></pre></td></tr></table></figure><p><a href="https://www.hangge.com/blog/cache/detail_2609.html" target="_blank">航歌 - Docker - 在容器中搭建运行EMQ服务器（MQTT服务器）</a></p><p><a href="https://blog.csdn.net/xj178926426/article/details/78832296" target="_blank">Centos7上安装Mosquitto和使用（源码方式）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum install -y c-ares-devel libwebsockets-devel.x86_64</span><br><span class="line">yum install mosquitto mosquitto-clients</span><br><span class="line"></span><br><span class="line"># 1 启动代理服务</span><br><span class="line">#在第一个终端中输入如下命令：</span><br><span class="line">mosquitto -v</span><br><span class="line">-v #打印更多的调试信息</span><br><span class="line"></span><br><span class="line"># 2 订阅主题</span><br><span class="line">#在第二个终端中输入如下命令：</span><br><span class="line">mosquitto_sub -v -t sensor</span><br><span class="line">-t #指定主题，此处为sensor </span><br><span class="line">-v #打印更多的调试信息</span><br><span class="line"></span><br><span class="line"># 3 发布内容</span><br><span class="line">#在第三个终端中输入如下命令：</span><br><span class="line">mosquitto_pub -t sensor -m 12</span><br><span class="line">-t #指定主题 </span><br><span class="line">-m #指定消息内容</span><br><span class="line"></span><br><span class="line"># 4 运行结果</span><br><span class="line">#当发布者推送消息之后，订阅者（也就是第二个终端）获得以下内容：</span><br><span class="line">sensor 12</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/saryli/p/8962624.html" target="_blank">MQTT服务器搭建–Mosquitto用户名密码配置</a><br>1.用户参数说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;mosquitto&#x2F;mosquitto.conf</span><br><span class="line"># 不允许匿名</span><br><span class="line">allow_anonymous false</span><br><span class="line"></span><br><span class="line"># 配置用户密码文件</span><br><span class="line">password_file &#x2F;etc&#x2F;mosquitto&#x2F;pwfile</span><br><span class="line"></span><br><span class="line"># 配置topic和用户</span><br><span class="line">acl_file &#x2F;etc&#x2F;mosquitto&#x2F;acl</span><br></pre></td></tr></table></figure><p>2.添加用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加用户&#39;admin&#39;</span><br><span class="line">mosquitto_passwd -c &#x2F;etc&#x2F;mosquitto&#x2F;pwfile admin</span><br></pre></td></tr></table></figure><p>3.添加Topic和用户的关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#cat acl</span><br><span class="line">#找到你要的topic --- &#39;a&#x2F;b&#39;</span><br><span class="line"></span><br><span class="line">#topic a&#x2F;b</span><br><span class="line">#在下面添加</span><br><span class="line">user admin</span><br><span class="line">topic write mtopic&#x2F;#</span><br><span class="line"></span><br><span class="line">#找到</span><br><span class="line">#This affects all clients</span><br><span class="line">#添加</span><br><span class="line">user admin</span><br><span class="line">topic read mtopic&#x2F;#</span><br></pre></td></tr></table></figure><p>4.用户认证测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c &#x2F;etc&#x2F;mosquitto&#x2F;mosquitto.conf</span><br><span class="line"></span><br><span class="line">#（订阅端）客户端启动：</span><br><span class="line">mosquitto_sub -h 192.168.1.100 -t mtopic -u admin -P 123456</span><br><span class="line"></span><br><span class="line">#（发布者）客户端启动：</span><br><span class="line">mosquitto_pub -h 192.168.1.100 -t mtopic -u admin -P 123456 -m &quot;test&quot;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/lulipro/p/10914482.html" target="_blank">ubuntu搭建MQTT服务器</a><br>1、安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:mosquitto-dev&#x2F;mosquitto-ppa     #添加源到软件仓库</span><br><span class="line">sudo apt-get update                                         #更新软件仓库列表</span><br><span class="line">sudo apt-get install mosquitto                              #安装mosquitto</span><br></pre></td></tr></table></figure><p>2、试运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mosquitto status                               #查看运行状态</span><br><span class="line">sudo service mosquitto start                                #启动服务</span><br><span class="line">sudo service mosquitto stop                                 #停止服务</span><br></pre></td></tr></table></figure><p>3、添加和修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo service mosquitto stop   #首先停止服务</span><br><span class="line"></span><br><span class="line">#用户的局部配置文件放在： &#x2F;etc&#x2F;mosquitto&#x2F;conf.d&#x2F;目录下，并且这个目录下的所有以.conf后缀的文件都将被mosquitto作为配置文件，在启动时加载。</span><br><span class="line">#在&#x2F;etc&#x2F;mosquitto&#x2F;conf.d目录下，新建myconfig.conf配置文件</span><br><span class="line">#在其中输入如下内容</span><br><span class="line">#-------------------------------------------</span><br><span class="line"># 关闭匿名访问，客户端必须使用用户名</span><br><span class="line">allow_anonymous false</span><br><span class="line"></span><br><span class="line">#指定 用户名-密码 文件</span><br><span class="line">password_file &#x2F;etc&#x2F;mosquitto&#x2F;pwfile.txt</span><br></pre></td></tr></table></figure><p>4、创建一个MQTT服务器账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#假设用户名为:</span><br><span class="line">user1</span><br><span class="line">#在命令行运行：</span><br><span class="line">mosquitto_passwd -c &#x2F;etc&#x2F;mosquitto&#x2F;pwfile.txt user1</span><br><span class="line">#回车后连续输入2次用户密码即可</span><br></pre></td></tr></table></figure><p>5、重新启动mosquitto</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">sudo service mosquitto start</span><br></pre></td></tr></table></figure><p>====  linux end  ====</p><p>====  windows start  ====<br><a href="https://packages.emqx.io/emqx-ee/v3.4.5/emqx-ee-windows-v3.4.5.zip" target="_blank">emqx-ee-windows-v3.4.5.zip</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">emqx install</span><br><span class="line">emqx start</span><br><span class="line"></span><br><span class="line"># 在浏览器中输入</span><br><span class="line">http:&#x2F;&#x2F;localhost:18083&#x2F;</span><br><span class="line"></span><br><span class="line">输入用户名：</span><br><span class="line">admin</span><br><span class="line">密码：</span><br><span class="line">public</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wolinghuanyun/article/details/53492189" target="_blank">Windows环境下搭建MosQuitto服务器</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">模块功能</span><br><span class="line">mosquitto.confmosquitto服务器的配置文件</span><br><span class="line">mosquitto用来开启broker</span><br><span class="line">mosquitto_passwd用来设置用户的账号与密码</span><br><span class="line">mosquitto_pub用来发布消息</span><br><span class="line">mosquitto_sub用来订阅消息</span><br><span class="line">pwfile.example通过mosquitto_passwd来存储用户的账号密码的文件</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/pgpanda/article/details/51800865" target="_blank">windows + mosquitto + mqtt + Cygwin64</a><br>mosquitto64位版与Cygwin64位版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">链接：</span><br><span class="line">http:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1o8Swnv8</span><br><span class="line">密码：</span><br><span class="line">si95</span><br><span class="line"></span><br><span class="line">链接：</span><br><span class="line">http:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1dEW2eq9</span><br><span class="line">密码：</span><br><span class="line">myj1</span><br><span class="line"></span><br><span class="line">Cygwin64添加源</span><br><span class="line">http:&#x2F;&#x2F;mirrors.163.com&#x2F;cygwin&#x2F;x86_64</span><br></pre></td></tr></table></figure><p><a href="https://github.com/emqtt/qmqtt" target="_blank">github qmqtt</a></p><p><a href="https://blog.csdn.net/github_33304260/article/details/73692589" target="_blank">MQTT + android 实现消息推送</a></p><p>DEMO地址 ：<br>大家只需要更换自己的IP地址就可以用了。<br><a href="http://download.csdn.net/detail/github_33304260/9879717" target="_blank" rel="noopener">http://download.csdn.net/detail/github_33304260/9879717</a><br><a href="" target="_blank"></a></p><p>后续会更加精彩，欢迎关注本人博客以及github<br><a href="https://github.com/libin7278/ImageLoader" target="_blank" rel="noopener">https://github.com/libin7278/ImageLoader</a><br><a href="" target="_blank"></a><br>====  windows end  ====</p><p>===============================  MQTT end  ===============================</p><p>===============================  zigbee start  ===============================<br><a href="https://www.bilibili.com/video/av57387117" target="_blank">基于zigbee的智能家居管理系统</a></p><p>基于zigbee和stm32的智能家居系统，上位机使用Qt编写，实现了基本的监控。主要包括监控室内温度、湿度、烟雾浓度，用led灯模拟控制家中的灯。界面良好<br><a href="https://gitee.com/sunshare21/SmartHOme-ARM" target="_blank">SmartHOme-ARM</a></p><p><a href="https://github.com/Raymaa/SmartHouse" target="_blank">github 全栈 SmartHouse</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#基于STM32单片机，硬件传感器感知室内环境数据并上传至服务器，具有通过前端页面，手机App远程实时监控室内环境、控制相应设备和远程预警等功能。</span><br><span class="line"></span><br><span class="line">Android&#x2F;SmartHome</span><br><span class="line">Web前端</span><br><span class="line">Web后端&#x2F;SmartHome</span><br><span class="line">img</span><br><span class="line">嵌入式</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013704336/article/details/51765397" target="_blank">基于ZigBee和STM32的智能家居控制系统的设计与实现(五)–终结篇</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;kevinlq&#x2F;SmartHome-Qt</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;kevinlq</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_42827999/article/details/93598213" target="_blank">STM32F429与CC2530 ZigBee模块通信</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STM32 与 ZigBee 接线如下：</span><br><span class="line">VCC -----&gt; VCC</span><br><span class="line">GND -----&gt; GND</span><br><span class="line">TXD -----&gt; RXD</span><br><span class="line">RXD -----&gt; TXD</span><br></pre></td></tr></table></figure><p>===============================  zigbee end  ===============================</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;===============================  MQTT start  ===============================&lt;/p&gt;
&lt;p&gt;====  客户端 start  ====&lt;br&gt;&lt;a href=&quot;https://github.com/
      
    
    </summary>
    
    
    
      <category term="物联网" scheme="http://brightereyer.xyz/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>[单片机+qt+arm+stm32] 流浪的鹅卵石</title>
    <link href="http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311643000.html/"/>
    <id>http://brightereyer.xyz/2020/01/06/articles/2020/01/06/1578311643000.html/</id>
    <published>2020-01-06T11:54:03.000Z</published>
    <updated>2020-01-06T11:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://kevinlq.com/categories/#ARM%E5%AD%A6%E4%B9%A0" target="_blank">鹅卵石 ARM学习</a><br><a href="https://github.com/kevinlq/SmartHome-Qt" target="_blank">SmartHome-Qt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://kevinlq.com/categories/#ARM%E5%AD%A6%E4%B9%A0&quot; target=&quot;_blank&quot;&gt;鹅卵石 ARM学习&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/kevinlq/Smart
      
    
    </summary>
    
    
    
      <category term="单片机+qt+arm+stm32" scheme="http://brightereyer.xyz/tags/%E5%8D%95%E7%89%87%E6%9C%BA-qt-arm-stm32/"/>
    
  </entry>
  
</feed>
